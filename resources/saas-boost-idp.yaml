---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost System User IdP
Parameters:
  Environment:
    Description: SaaS Boost environment name
    Type: String
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
  SaaSBoostUtilsLayer:
    Description: Utils Layer ARN
    Type: String
  CloudFormationUtilsLayer:
    Description: CloudFormation Utils Layer ARN
    Type: String
  KeycloakHelperLayer:
    Description: Keycloak Helper Layer ARN
    Type: String
  CodePipelineBucket:
    Description: S3 bucket for CodePipeline artifacts
    Type: String
  CodePipelineUpdateEcsService:
    Description: Lambda ARN to update ECS desired count
    Type: String
  StartCodeBuildLambda:
    Description: StartCodeBuild Lambda ARN
    Type: String
  CloudFormationWaitHandleCallback:
    Description: CodePipelineWaitHandler Lambda ARN
    Type: String
  IdentityProvider:
    Description: Identity Provider for the SaaS Boost system users and Control Plane API authorization
    Type: String
    Default: COGNITO
    AllowedValues: [COGNITO, KEYCLOAK, AUTH0]
  AdminUsername:
    Description: SaaS Boost initial admin user name
    Type: String
    Default: admin
  AdminEmailAddress:
    Description: Email address of admin user to receive temporary password notification
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid email address.
    Type: String
  AdminWebUrl:
    Description: The SaaS Boost admin web URL.
    Type: String
  CustomDomainName:
    Description: FQDN custom domain name for the identity provider (e.g. auth.example.com)
    Type: String
  CustomDomainHostedZone:
    Description: Route53 hosted zone id for the custom domain name to create the ALB record set alias under
    Type: String
  CustomDomainCertificate:
    Description: ACM certificate ARN for the custom domain name
    Type: String
  ApiGatewayUrl:
    Description: SaaS Boost API Gateway invoke URL
    Type: String
  VPC:
    Type: String
    Description: The SaaS Boost VPC ID.
  PublicSubnets:
    Description: SaaS Boost VPC public subnets
    Type: String
  PrivateSubnets:
    Description: SaaS Boost VPC public subnets
    Type: String
  ClearEcrRepoArn:
    Description: Lambda custom resource ARN to delete images before deleting ECR Repositories
    Type: String
Conditions:
  UseCognito: !Equals [!Ref IdentityProvider, 'COGNITO']
  UseKeycloak: !Equals [!Ref IdentityProvider, 'KEYCLOAK']
  UseAuth0: !Equals [!Ref IdentityProvider, 'AUTH0']
Resources:
  SaaSBoostAdminCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN
      GenerateSecretString:
        IncludeSpace: false
        ExcludePunctuation: true
        PasswordLength: 12
        GenerateStringKey: password
        SecretStringTemplate: !Sub '{"username": "${AdminUsername}", "email": "${AdminEmailAddress}"}'
  cognito:
    Type: AWS::CloudFormation::Stack
    Condition: UseCognito
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-idp-cognito.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        AdminUsername: !Ref AdminUsername
        AdminEmailAddress: !Ref AdminEmailAddress
        AdminWebUrl: !Ref AdminWebUrl
  keycloak:
    Type: AWS::CloudFormation::Stack
    Condition: UseKeycloak
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-idp-keycloak.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        KeycloakHelperLayer: !Ref KeycloakHelperLayer
        CodePipelineBucket: !Ref CodePipelineBucket
        CodePipelineUpdateEcsService: !Ref CodePipelineUpdateEcsService
        StartCodeBuildLambda: !Ref StartCodeBuildLambda
        CloudFormationWaitHandleCallback: !Ref CloudFormationWaitHandleCallback
        AdminCredentials: !Ref SaaSBoostAdminCredentials
        AdminWebUrl: !Ref AdminWebUrl
        CustomDomainName: !Ref CustomDomainName
        CustomDomainHostedZone: !Ref CustomDomainHostedZone
        CustomDomainCertificate: !Ref CustomDomainCertificate
        VPC: !Ref VPC
        PublicSubnets: !Ref PublicSubnets
        PrivateSubnets: !Ref PrivateSubnets
        ClearEcrRepoArn: !Ref ClearEcrRepoArn
  auth0:
    Type: AWS::CloudFormation::Stack
    Condition: UseAuth0
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-idp-auth0.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        AdminCredentials: !Ref SaaSBoostAdminCredentials
        AdminWebUrl: !Ref AdminWebUrl
  AdminWebAppClientName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN_WEB_APP_CLIENT
      Type: String
      Value:
        Fn::If:
          - UseCognito
          - !GetAtt cognito.Outputs.AdminWebAppClientName
          - !If
            - UseKeycloak
            - !GetAtt keycloak.Outputs.AdminWebAppClientName
            - !GetAtt auth0.Outputs.AdminWebAppClientName
  AdminWebAppClientId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN_WEB_APP_CLIENT_ID
      Type: String
      Value:
        Fn::If:
          - UseCognito
          - !GetAtt cognito.Outputs.AdminWebAppClientId
          - !If
            - UseKeycloak
            - !GetAtt keycloak.Outputs.AdminWebAppClientId
            - !GetAtt auth0.Outputs.AdminWebAppClientId
  ApiAppClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /saas-boost/${Environment}/API_APP_CLIENT
      SecretString:
        Fn::If:
          - UseCognito
          - !Sub '{"client_name": "${cognito.Outputs.ApiAppClientName}", "client_id": "${cognito.Outputs.ApiAppClientId}", "client_secret": "${cognito.Outputs.ApiAppClientSecret}", "token_endpoint": "${cognito.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
          - !If
            - UseKeycloak
            - !Sub '{"client_name": "${keycloak.Outputs.ApiAppClientName}", "client_id": "${keycloak.Outputs.ApiAppClientId}", "client_secret": "${keycloak.Outputs.ApiAppClientSecret}", "token_endpoint": "${keycloak.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
            - !Sub '{"client_name": "${auth0.Outputs.ApiAppClientName}", "client_id": "${auth0.Outputs.ApiAppClientId}", "client_secret": "${auth0.Outputs.ApiAppClientSecret}", "token_endpoint": "${auth0.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
  PrivateApiAppClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /saas-boost/${Environment}/PRIVATE_API_APP_CLIENT
      SecretString:
        Fn::If:
          - UseCognito
          - !Sub '{"client_name": "${cognito.Outputs.PrivateApiAppClientName}", "client_id": "${cognito.Outputs.PrivateApiAppClientId}", "client_secret": "${cognito.Outputs.PrivateApiAppClientSecret}", "token_endpoint": "${cognito.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
          - !If
            - UseKeycloak
            - !Sub '{"client_name": "${keycloak.Outputs.PrivateApiAppClientName}", "client_id": "${keycloak.Outputs.PrivateApiAppClientId}", "client_secret": "${keycloak.Outputs.PrivateApiAppClientSecret}", "token_endpoint": "${keycloak.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
            - !Sub '{"client_name": "${auth0.Outputs.PrivateApiAppClientName}", "client_id": "${auth0.Outputs.PrivateApiAppClientId}", "client_secret": "${auth0.Outputs.PrivateApiAppClientSecret}", "token_endpoint": "${auth0.Outputs.OidcTokenEndpoint}", "api_endpoint": "${ApiGatewayUrl}"}'
Outputs:
  # These outputs are used by the admin web app stack
  OidcIssuerUrl:
    Description: OIDC issuer for System User IdP
    Value:
      Fn::If:
        - UseCognito
        - !GetAtt cognito.Outputs.OidcIssuer
        - !If
          - UseKeycloak
          - !GetAtt keycloak.Outputs.OidcIssuer
          - !GetAtt auth0.Outputs.OidcIssuer
  OidcDomainUrl:
    Description: The OIDC authorization server URL
    Value:
      Fn::If:
        - UseCognito
        - !GetAtt cognito.Outputs.CognitoDomain
        - '' # Can be blank for any IdP that supports OIDC end_session_endpoint
  AdminWebAppClient:
    Description: Admin Web App Public App Client Id
    Value:
      Fn::If:
        - UseCognito
        - !GetAtt cognito.Outputs.AdminWebAppClientId
        - !If
          - UseKeycloak
          - !GetAtt keycloak.Outputs.AdminWebAppClientId
          - !GetAtt auth0.Outputs.AdminWebAppClientId
  # These outputs are used by the API Gateway Authorizer
  ApiAppClient:
    Description: Private OAuth app client id for API access
    Value:
      Fn::If:
        - UseCognito
        - !GetAtt cognito.Outputs.ApiAppClientId
        - !If
          - UseKeycloak
          - !GetAtt keycloak.Outputs.ApiAppClientId
          - !GetAtt auth0.Outputs.ApiAppClientId
  PrivateApiAppClient:
    Description: Private OAuth app client id for private API access
    Value:
      Fn::If:
        - UseCognito
        - !GetAtt cognito.Outputs.PrivateApiAppClientId
        - !If
          - UseKeycloak
          - !GetAtt keycloak.Outputs.PrivateApiAppClientId
          - !GetAtt auth0.Outputs.PrivateApiAppClientId
  # These outputs are used conditionally by the system user service
  CognitoUserPool:
    Condition: UseCognito
    Description: Cognito User Pool ID
    Value: !GetAtt cognito.Outputs.UserPool
  KeycloakHost:
    Condition: UseKeycloak
    Description: Keycloak database hostname
    Value: !GetAtt keycloak.Outputs.KeycloakHost
  KeycloakRealm:
    Condition: UseKeycloak
    Description: Keycloak database hostname
    Value: !GetAtt keycloak.Outputs.KeycloakRealm
  KeycloakDatabaseEndpoint:
    Condition: UseKeycloak
    Description: Keycloak database hostname
    Value: !GetAtt keycloak.Outputs.KeycloakDatabaseEndpoint
...