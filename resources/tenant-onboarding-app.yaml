---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost Tenant Onboarding Application Service
Parameters:
  Environment:
    Description: Environment (test, uat, prod, etc.)
    Type: String
  TenantId:
    Description: The GUID for the tenant
    Type: String
  Tier:
    Description: The tier this tenant is onboading into
    Type: String
    Default: ''
  ServiceName:
    Description: Name for this application service
    Type: String
  ServiceResourceName:
    Description: CloudFormation friendly version of the service name
    Type: String
  ContainerRepository:
    Description: The name of the ECR repository hosting the container image
    Type: String
  ContainerRepositoryTag:
    Description: The container image tag in the ECR repository
    Type: String
    Default: latest 
  ECSCluster:
    Description: This tenant's container cluster
    Type: String
  PubliclyAddressable:
    Description: Is this service publicly accessible from the Internet?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
  PublicPathRoute:
    Description: If this service is public, what path part routes to it?
    Type: String
    Default: '/*'
  PublicPathRulePriority:
    Description: The ALB listener rule priority for this path route
    Type: Number
    Default: 1
  VPC:
    Description: This tenant's VPC
    Type: String
  SubnetPrivateA:
    Description: Private subnet in this tenant's VPC
    Type: String
  SubnetPrivateB:
    Description: Private subnet in this tenant's VPC
    Type: String
  PrivateRouteTable:
    Description: Route table for the private subnets in this tenant's VPC
    Type: String
  ECSLoadBalancerHttpListener:
    Description: The ARN of the ALB listener for HTTP traffic
    Type: String
  ECSLoadBalancerHttpsListener:
    Description: The ARN of the ALB listener for HTTPS traffic
    Type: String
  ECSSecurityGroup:
    Description: Source security group to grant access to the container cluster
    Type: String
  ContainerOS:
    Description: Operating System to use for the Docker host
    Type: String
    # Can't have dashes or underscores in Mappings keys :(
    AllowedValues: [WIN2019FULL, WIN2019CORE, WIN2022FULL, WIN2022CORE, WIN20H2CORE, WIN2016FULL, LINUX]
  ClusterInstanceType:
    Description: EC2 instance type to use for non Fargate Docker hosts
    Type: String
    Default: t2.xlarge
  TaskLaunchType:
    Description: ECS launch type. Defaults to Fargate.
    Type: String
    AllowedValues: [FARGATE, EC2]
    Default: FARGATE
  TaskMemory:
    Description: Fargate memory setting
    Type: Number
    AllowedValues: [512, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720]
    Default: 1024
  TaskCPU:
    Description: Fargate CPU setting
    Type: Number
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Default: 512
  MinTaskCount:
    Description: Desired count of concurrent tasks for this tenant
    Type: Number
    Default: 1
  MaxTaskCount:
    Description: Maximum count of concurrent tasks for this tenant (max size we can auto scale up to)
    Type: Number
    Default: 1
  ContainerPort:
    Description: The TCP port the container is listening on via EXPOSE in the Dockerfile
    Type: Number
  ContainerHealthCheckPath:
    Description: The destination on the Container for the Load Balancer to use for health checks
    Type: String
  UseRDS:
    Description: Deploy the RDS nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  RDSInstanceClass:
    Description: The compute and memory capacity of the DB instance
    Type: String
  RDSEngine:
    Description: The database engine
    Type: String
  RDSEngineVersion:
    Description: The version number of the database engine to use
    Type: String
  RDSParameterGroupFamily:
    Description: The database parameter group family supporting the engine and engine version. Only used for Aurora clusters.
    Type: String
  RDSUsername:
    Description: The master username for the database
    Type: String
  RDSPasswordParam:
    Description: The Parameter Store secure string parameter and version containing the master database password
    Type: String
  RDSPort:
    Description: The TCP port to connect to the database on
    Type: String
  RDSDatabase:
    Description: Optional. The name of the database to create.
    Type: String
  RDSBootstrap:
    Description: Optional. The filename of the SQL bootstrap file.
    Type: String
  MetricsStream:
    Description: Optional. The name of the Firehose delivery stream for the Analytics system.
    Type: String
  EventBus:
    Description: Optional. SaaS boost Metering and Billing EventBridge bus.
    Type: String
  FileSystemMountPoint:
    Description: Container mount point for the file system
    Type: String
    Default: ''
  UseEFS:
    Description: Deploy the EFS nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  EncryptEFS:
    Description: Turn on EFS encryption at rest?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
  EFSLifecyclePolicy:
    Description: Enable EFS IA lifecycle?
    Type: String
    AllowedValues:
      - NEVER
      - AFTER_7_DAYS
      - AFTER_14_DAYS
      - AFTER_30_DAYS
      - AFTER_60_DAYS
      - AFTER_90_DAYS
    Default: NEVER
  UseFSx:
    Description: Deploy the FSX nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  FSxFileSystemType:
    Description: Type of FSx file system to provision
    Type: String
    AllowedValues: [FSX_WINDOWS, FSX_ONTAP]
    Default: FSX_WINDOWS
  FSxWindowsMountDrive:
    Description: Windows drive to mount attach the file system to
    Type: String
    Default: 'G:'
  FileSystemStorage:
    Description: Storage capacity for the file system in GB
    Type: Number
    Default: 32
  FileSystemThroughput:
    Description: Throughput capacity for the file system in MB/s
    Type: Number
    Default: 16
  FSxBackupRetention:
    Description: Number of days to retain automatic backups
    MinValue: 0
    MaxValue: 90
    Default: 0
    Type: Number
  FSxDailyBackupTime:
    Description: Preferred time to take daily automatic backups, formatted HH:MM in the UTC time zone.
    Default: '02:00'
    Type: String
  FSxWeeklyMaintenanceTime:
    Description: Preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone
    Default: '7:01:00'
    Type: String
  OntapVolumeSize:
    Description: Specify the size of the ONTAP volume to create inside the Storage Virtual Machine in MB
    Type: Number
    Default: 40
    MinValue: 20
    MaxValue: 104857600
  Disable:
    Description: Disable the tenant's access to the application
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  OnboardingDdbTable:
    Description: Internal DDB table used to store Onboarding Metadata
    Type: String
  # These params are here to read the image values from the public SSM. Leave the defaults.
  WIN2022FULL:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-ECS_Optimized/image_id
  WIN2022CORE:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Core-ECS_Optimized/image_id
  WIN2019FULL:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized/image_id
  WIN2019CORE:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Core-ECS_Optimized/image_id
  WIN20H2CORE:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-20H2-English-Core-ECS_Optimized/image_id
  WIN2016FULL:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-ECS_Optimized/image_id
  AMZNLINUX2:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Conditions:
  IsPublic: !Equals [!Ref PubliclyAddressable, 'true']
  IsPrivate: !Not [Condition: IsPublic]
  HasHttpsListener: !Not [!Equals [!Ref ECSLoadBalancerHttpsListener, '']]
  IsPublicHttps: !And
    - Condition: IsPublic
    - Condition: HasHttpsListener
  IsPublicHttp: !And
    - Condition: IsPublic
    - !Not [Condition: HasHttpsListener]
  DisableAccess: !Equals [!Ref Disable, 'true']
  ProvisionEFS: !Equals [!Ref UseEFS, 'true']
  ProvisionRDS: !Equals [!Ref UseRDS, 'true']
  Ec2LaunchType: !Equals [!Ref TaskLaunchType, 'EC2']
  FargateLaunchType: !Equals [!Ref TaskLaunchType, 'FARGATE']
  WindowsOS: !Not [!Equals [!Ref ContainerOS, 'LINUX']]
  LinuxOS: !Equals [!Ref ContainerOS, 'LINUX']
  Ec2Windows: !And
    - Condition: Ec2LaunchType
    - Condition: WindowsOS
  Ec2Linux: !And
    - Condition: Ec2LaunchType
    - Condition: LinuxOS
  ProvisionFSx: !And
    - !Equals [!Ref UseFSx, 'true']
    - Condition: Ec2LaunchType
  IsWin2019Full: !Equals [WIN2019FULL, !Ref ContainerOS]
  IsWin2019Core: !Equals [WIN2019CORE, !Ref ContainerOS]
  IsWin2022Full: !Equals [WIN2022FULL, !Ref ContainerOS]
  IsWin2022Core: !Equals [WIN2022CORE, !Ref ContainerOS]
  IsWin20H2Core: !Equals [WIN20H2CORE, !Ref ContainerOS]
Resources:
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Condition: Ec2LaunchType
    Properties:
      Name: 
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            TargetCapacity: 100
            Status: ENABLED
          ManagedTerminationProtection: ENABLED
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Tier
          Value: !Ref Tier
  AttachEcsCapacityProvider:
    Type: Custom::CustomResource
    Condition: Ec2LaunchType
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sb-${Environment}-attach-capacity-provider
      CapacityProvider: !Ref CapacityProvider
      ECSCluster: !Ref ECSCluster
      OnboardingDdbTable: !Ref OnboardingDdbTable
      TenantId: !Ref TenantId
  CapacityProviderWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: Ec2LaunchType
    DependsOn: AttachEcsCapacityProvider
  ClusterCapacityAssociationWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [Ec2LaunchType, !Ref CapacityProviderWaitHandle, !Ref WaitHandle]
      Timeout: '1'
      Count: 0
  InvokeDisableInstanceProtection:
    Type: Custom::CustomResource
    Condition: Ec2LaunchType
    DependsOn:
      - ECSService
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sb-${Environment}-set-instance-protection
      AutoScalingGroup: !Ref ECSAutoScalingGroup
      Enable: 'false'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-exec-', !Ref ServiceResourceName]]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-exec-', !Ref ServiceResourceName]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepository}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSPasswordParam}
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}/tenants/${TenantId}/ServiceDiscovery.env'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:aws:s3:::{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}'
              - Effect: Allow
                Action:
                  - fsx:DescribeFileSystems
                Resource:
                  - !Sub arn:aws:fsx:${AWS::Region}:${AWS::AccountId}:file-system/*
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join: ['', ['/ecs/sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      RetentionInDays: 30
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-task-', !Ref ServiceResourceName]]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-task-', !Ref ServiceResourceName]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${MetricsStream}
              - Effect: Allow
                Action:
                  - events:DescribeEventBus
                  - events:PutEvents
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${EventBus}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}/tenants/${TenantId}/*
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RequiresCompatibilities:
        Fn::If:
          - Ec2LaunchType
          - - EC2
          - - FARGATE
      Memory: !If [FargateLaunchType, !Ref TaskMemory, !Ref 'AWS::NoValue']
      Cpu: !If [FargateLaunchType, !Ref TaskCPU, !Ref 'AWS::NoValue']
      NetworkMode:
        Fn::If:
          - Ec2Windows
          - !Ref 'AWS::NoValue'
          - awsvpc
      Volumes:
        Fn::If:
          - ProvisionFSx
          - - Name: !GetAtt fsx.Outputs.FileSystemId
              Host:
                SourcePath: !Sub '${FSxWindowsMountDrive}\'
          - !If
            - ProvisionEFS
            - - Name: !GetAtt efs.Outputs.FileSystemId
                EFSVolumeConfiguration:
                  FilesystemId: !GetAtt efs.Outputs.FileSystemId
            - !Ref 'AWS::NoValue'
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Tier
          Value: !Ref Tier
      ContainerDefinitions:
        - Name:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerRepository}:${ContainerRepositoryTag}
          Cpu: !If [Ec2LaunchType, !Ref TaskCPU, !Ref 'AWS::NoValue']
          Memory: !If [Ec2LaunchType, !Ref TaskMemory, !Ref 'AWS::NoValue']
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            Fn::If:
              - ProvisionRDS
              - - Name: AWS_REGION
                  Value: !Ref AWS::Region
                - Name: SAAS_BOOST_ENV
                  Value: !Ref Environment
                - Name: TENANT_ID
                  Value: !Ref TenantId
                - Name: SAAS_BOOST_RESOURCES_BUCKET
                  Value: !Sub '{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}'
                - Name: SAAS_BOOST_EVENT_BUS
                  Value: !Ref EventBus
                - Name: METRICS_STREAM
                  Value: !Ref MetricsStream
                - Name: DB_HOST
                  Value: !GetAtt rds.Outputs.RdsEndpoint
                - Name: DB_PORT
                  Value: !Ref RDSPort
                - Name: DB_NAME
                  Value: !Ref RDSDatabase
                - Name: DB_USER
                  Value: !Ref RDSUsername
              - - Name: AWS_REGION
                  Value: !Ref AWS::Region
                - Name: SAAS_BOOST_ENV
                  Value: !Ref Environment
                - Name: TENANT_ID
                  Value: !Ref TenantId
                - Name: SAAS_BOOST_RESOURCES_BUCKET
                  Value: !Sub '{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}'
                - Name: SAAS_BOOST_EVENT_BUS
                  Value: !Ref EventBus
                - Name: METRICS_STREAM
                  Value: !Ref MetricsStream
          EnvironmentFiles:
            - Type: s3
              Value: !Sub 'arn:aws:s3:::{{resolve:ssm:/saas-boost/${Environment}/RESOURCES_BUCKET}}/tenants/${TenantId}/ServiceDiscovery.env'
          MountPoints:
            Fn::If:
              - ProvisionEFS
              - - ContainerPath: !Ref FileSystemMountPoint
                  SourceVolume: !GetAtt efs.Outputs.FileSystemId
              - !If
                - ProvisionFSx
                - - ContainerPath: !Ref FileSystemMountPoint
                    SourceVolume: !GetAtt fsx.Outputs.FileSystemId
                - !Ref 'AWS::NoValue'
          LinuxParameters:
            Fn::If:
              - WindowsOS
              - !Ref 'AWS::NoValue'
              - InitProcessEnabled: true
          Secrets:
            Fn::If:
              - ProvisionRDS
              - - Name: DB_PASSWORD
                  ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSPasswordParam}
              - !Ref 'AWS::NoValue'
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      RoleArn: !Sub '{{resolve:ssm:/saas-boost/${Environment}/CODE_PIPELINE_ROLE}}'
      ArtifactStore:
        Location: !Sub '{{resolve:ssm:/saas-boost/${Environment}/CODE_PIPELINE_BUCKET}}'
        Type: S3
      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Sub '{{resolve:ssm:/saas-boost/${Environment}/CODE_PIPELINE_BUCKET}}'
                S3ObjectKey:
                  Fn::Join: ['', [!Ref TenantId, '/', 'sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: imgdef
        - Name: Deploy
          Actions:
            - Name: PreDeployAction
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 1
              Configuration:
                FunctionName: !Sub sb-${Environment}-update-ecs
                UserParameters: !Sub '{"cluster":"${ECSCluster}","service":"${ECSService.Name}","desiredCount":${MinTaskCount}}'
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 2
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !GetAtt ECSService.Name
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: imgdef
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Tier
          Value: !Ref Tier
  FsxWaitHandle:
    Condition: ProvisionFSx
    DependsOn: fsx
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  FsxWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [ProvisionFSx, !Ref FsxWaitHandle, !Ref WaitHandle]
      Timeout: '1'
      Count: 0
  # We either need an Auto Scaling Group, Instance Profile, and Launch Template (Windows/EC2)
  # Or we need an Target Group (Linux/Fargate)
  # per https://aws.amazon.com/blogs/containers/managing-compute-for-amazon-ecs-clusters-with-capacity-providers/
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: Ec2LaunchType
    Properties:
      AutoScalingGroupName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      VPCZoneIdentifier:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      LaunchTemplate:
        LaunchTemplateId: !If [Ec2Windows, !Ref WindowsLaunchTemplate, !Ref LinuxLaunchTemplate]
        Version: !If [Ec2Windows, !GetAtt WindowsLaunchTemplate.LatestVersionNumber, !GetAtt LinuxLaunchTemplate.LatestVersionNumber]
      NewInstancesProtectedFromScaleIn: true
      MinSize: '0'
      MaxSize: '20'
      DesiredCapacity: '0'
      #Cooldown:
      HealthCheckGracePeriod: 30
      #HealthCheckType:
      #MetricsCollection:
      #NotificationConfigurations:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        #MinSuccessfulInstancesPercent: 0
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Condition: Ec2LaunchType
    Properties:
      RoleName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-ecs-instance-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      Policies:
        - PolicyName:
            Fn::Join: ['', ['sb-', !Ref Environment, '-ecs-instance-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepository}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DeregisterContainerInstance
                  - ecs:RegisterContainerInstance
                  - ecs:SubmitAttachmentStateChanges
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSCluster}
              - Effect: Allow
                Action:
                  - ecs:Poll
                  - ecs:StartTelemetrySession
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSCluster}
              - Effect: Allow
                Action:
                  - ecs:DiscoverPollEndpoint
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_USER
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_PASSWORD
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_IPS
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_NAME
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: Ec2LaunchType
    Properties:
      Path: '/'
      Roles:
        - !Ref ECSInstanceRole
  WindowsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: Ec2Windows
    DependsOn: FsxWaitCondition
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WindowsLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackName} -r WindowsLaunchTemplate --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\\cfn\\cfn-hup.conf
                  - c:\\etc\\cfn\\hooks.d\\cfn-auto-reloader.conf
    Properties:
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value:
                Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
            - Key: Tenant
              Value:
                !Ref TenantId
            - Key: Tier
              Value: !Ref Tier
      LaunchTemplateData:
        ImageId:
          Fn::If:
            - IsWin2019Full
            - !Ref WIN2019FULL
            - !If
              - IsWin2019Core
              - !Ref WIN2019CORE
              - !If
                - IsWin2022Full
                - !Ref WIN2022FULL
                - !If
                  - IsWin2022Core
                  - !Ref WIN2022CORE
                  - !If
                    - IsWin20H2Core
                    - !Ref WIN20H2CORE
                    - !Ref WIN2016FULL
        InstanceType: !Ref ClusterInstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        KeyName: !Ref 'AWS::NoValue'
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::If:
          - ProvisionFSx
          - Fn::Base64:
              !Sub |
                <powershell>
                Start-Transcript -Path "C:\UserData.log" -Append
                Write-Output ("Download and install the CloudWatch agent")
                Invoke-WebRequest https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile c:\Windows\Temp\amazon-cloudwatch-agent.msi

                Start-Process msiexec.exe -Wait -ArgumentList '/I c:\Windows\Temp\amazon-cloudwatch-agent.msi /quiet'

                Write-Output ("Write a config file for the CloudWatch agent and then reload/restart the agent")
                cd $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent
                .\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a fetch-config -s

                # Setup the ECS agent to point to our cluster and enable task IAM role and the awslogs driver
                Write-Output ("Starting up ECS Agent and joining the ${ECSCluster} cluster")
                Import-Module ECSTools
                Initialize-ECSAgent -Cluster ${ECSCluster} -EnableTaskIAMRole -LoggingDrivers '["json-file","awslogs"]'

                # If you have task IAM roles, awslogs doesn't work unless you set this environment variable
                [Environment]::SetEnvironmentVariable("ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE", $TRUE, "Machine")
                Restart-Service AmazonECS

                Write-Output ("Getting SSM Parameters for the Active Directory domain")
                $directoryName = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_NAME).Parameters[0].Value
                $username = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_USER).Parameters[0].Value
                $password = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_PASSWORD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
                $ipdns = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_IPS).Parameters[0].Value
                $ips = $ipdns.Split(",")

                Write-Output ("Reading the existing VPC DNS Server IP")
                # Get the VPC DNS server.
                $dnsClient = Get-DnsClientServerAddress -AddressFamily IPv4 | Where-Object {$_.ServerAddresses.Count -gt 0} | Select-Object -First 1

                # During retry, we should avoid adding duplicate DNS servers, if it was already added in the previous attempt.
                # VPC DNS server is the last one in the list.
                $vpcdns = $dnsClient.ServerAddresses | Select -Last 1

                # Set up the IPv4 address of the AD DNS server as the first DNS server on this machine
                $dnsServersToUpdate = $("{0},{1}" -f $ips[0], $vpcdns)
                Write-Output ("Adding AD DNS server addresses: {0} to the IPV4 interface Index: {1}" -f $dnsServersToUpdate, $dnsClient.InterfaceIndex)
                Set-DnsClientServerAddress -InterfaceIndex $dnsClient.InterfaceIndex -ServerAddresses $dnsServersToUpdate

                # Join the domain
                Write-Output ("Joining domain $directoryName")
                $credential = New-Object System.Management.Automation.PSCredential("$directoryName\$username", $password)
                Add-Computer -DomainName $directoryName -Credential $credential -Verbose -WarningAction Ignore

                If ('${FSxFileSystemType}' -eq 'FSX_ONTAP')  {
                    $fileServerPath = "\\{0}\C$" -f "${fsx.Outputs.FSxDnsName}"
                }
                Else {
                    $fileServerPath = "\\{0}\share" -f "${fsx.Outputs.FSxDnsName}"
                }
                Write-Output ("Setting FSx File Server remote path to $fileServerPath")

                # Map the share to local drive letter
                Write-Output ("Mapping $fileserverpath to ${FSxWindowsMountDrive}")
                New-SmbGlobalMapping -RemotePath $fileServerPath -Credential $credential -LocalPath ${FSxWindowsMountDrive} -RequirePrivacy $true -ErrorAction Stop

                Write-Output ("CloudFormation signal completion")
                # Signal CloudFormation that we're done setting up
                cfn-init.exe -v -s ${AWS::StackName} -r WindowsLaunchTemplate --region ${AWS::Region}
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

                Stop-Transcript
                </powershell>
                <persist>true</persist>
          - Fn::Base64:
              !Sub |
                <powershell>
                Start-Transcript -Path "C:\UserData.log" -Append
                Write-Output ("Download and install the CloudWatch agent")
                Invoke-WebRequest https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile c:\Windows\Temp\amazon-cloudwatch-agent.msi

                Start-Process msiexec.exe -Wait -ArgumentList '/I c:\Windows\Temp\amazon-cloudwatch-agent.msi /quiet'

                Write-Output ("Write a config file for the CloudWatch agent and then reload/restart the agent")
                cd $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent
                .\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a fetch-config -s

                # Setup the ECS agent to point to our cluster and enable task IAM role and the awslogs driver
                Write-Output ("Starting up ECS Agent and joining the ${ECSCluster} cluster")
                Import-Module ECSTools
                Initialize-ECSAgent -Cluster ${ECSCluster} -EnableTaskIAMRole -LoggingDrivers '["json-file","awslogs"]'

                # If you have task IAM roles, awslogs doesn't work unless you set this environment variable
                [Environment]::SetEnvironmentVariable("ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE", $TRUE, "Machine")
                Restart-Service AmazonECS

                Write-Output ("CloudFormation signal completion")
                # Signal CloudFormation that we're done setting up
                cfn-init.exe -v -s ${AWS::StackName} -r WindowsLaunchTemplate --region ${AWS::Region}
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

                Stop-Transcript
                </powershell>
                <persist>true</persist>
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value:
                  Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
              - Key: Tenant
                Value:
                  !Ref TenantId
              - Key: Tier
                Value: !Ref Tier
  LinuxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: Ec2Linux
    DependsOn: FsxWaitCondition
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LinuxLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r LinuxLaunchTemplate --region ${AWS::Region}
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value:
                Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
            - Key: Tenant
              Value:
                !Ref TenantId
            - Key: Tier
              Value: !Ref Tier
      LaunchTemplateData:
        ImageId: !Ref AMZNLINUX2
        InstanceType: !Ref ClusterInstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        KeyName: !Ref 'AWS::NoValue'
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap amazon-cloudwatch-agent

            # Setup the CloudWatch logs agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a fetch-config -s

            # Setup the ECS agent to point to our cluster
            echo ECS_CLUSTER="${ECSCluster}" >> /etc/ecs/ecs.config

            # Signal CloudFormation that we're done setting up
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r LinuxLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value:
                  Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
              - Key: Tenant
                Value:
                  !Ref TenantId
              - Key: Tier
                Value: !Ref Tier
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsPublic
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref ContainerHealthCheckPath
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: !If [WindowsOS, instance, ip]
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Tier
          Value: !Ref Tier
  ALBRule:
    Condition: IsPublicHttp
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: !If [DisableAccess, fixed-response, forward]
          TargetGroupArn: !If [DisableAccess, !Ref 'AWS::NoValue', !Ref ALBTargetGroup]
          FixedResponseConfig:
            !If
              - DisableAccess
              - ContentType: text/html
                StatusCode: '200'
                MessageBody: <html><body>Access to this application is disabled. Contact support if you have questions.</body></html>
              - !Ref 'AWS::NoValue'
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref PublicPathRoute
      ListenerArn: !Ref ECSLoadBalancerHttpListener
      Priority: !Ref PublicPathRulePriority
  ALBSSLRule:
    Condition: IsPublicHttps
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: !If [DisableAccess, fixed-response, forward]
          TargetGroupArn: !If [DisableAccess, !Ref 'AWS::NoValue', !Ref ALBTargetGroup]
          FixedResponseConfig:
            !If
              - DisableAccess
              - ContentType: text/html
                StatusCode: '200'
                MessageBody: <html><body>Access to this application is disabled. Contact support if you have questions.</body></html>
              - !Ref 'AWS::NoValue'
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref PublicPathRoute
      ListenerArn: !Ref ECSLoadBalancerHttpsListener
      Priority: !Ref PublicPathRulePriority
  ServiceDiscoveryNamespace:
      Type: AWS::ServiceDiscovery::PrivateDnsNamespace
      Condition: IsPrivate
      Properties:
          Name: local
          Vpc: !Ref VPC
  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Condition: IsPrivate
    Properties:
      Name: !Ref ServiceResourceName
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - Type: A
            TTL: 60
          - Type: SRV
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1
      NamespaceId: !Ref ServiceDiscoveryNamespace
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ClusterCapacityAssociationWaitCondition
    Properties:
      EnableExecuteCommand: !If [WindowsOS, false, true]
      ServiceName: !Ref ServiceResourceName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      PropagateTags: TASK_DEFINITION
      LaunchType: !If [FargateLaunchType, !Ref TaskLaunchType, !Ref 'AWS::NoValue']
      # Initially set DesiredCount to zero so the resource stabilizes on create stack. CodePipeline will update it when deploying the task.
      DesiredCount: 0
      NetworkConfiguration:
        !If
          - WindowsOS
          - !Ref 'AWS::NoValue'
          - AwsvpcConfiguration:
              SecurityGroups:
                - !Ref ECSSecurityGroup
              Subnets:
                - !Ref SubnetPrivateA
                - !Ref SubnetPrivateB
      # Role: The SaaS Boost installer makes sure the ECS service linked role is available
      LoadBalancers:
        !If
          - IsPublic
          - - ContainerName:
                Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
              ContainerPort: !Ref ContainerPort
              TargetGroupArn: !Ref ALBTargetGroup
          - !Ref 'AWS::NoValue'
      CapacityProviderStrategy:
        !If
          - Ec2LaunchType
          - - CapacityProvider: !Ref CapacityProvider
              Base: 1
              Weight: 1
          - !Ref 'AWS::NoValue'
      ServiceRegistries:
        !If
          - IsPrivate
          - - RegistryArn: !GetAtt ServiceDiscovery.Arn
              ContainerName:
                Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-', !Ref ServiceResourceName]]
              ContainerPort: !Ref ContainerPort
          - !Ref 'AWS::NoValue'
  ECSServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MaxCapacity: !Ref MaxTaskCount
      MinCapacity: !Ref MinTaskCount
  ECSServiceCPUAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-autoscaling-policy-cpu', '-', !Ref ServiceResourceName]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleOutCooldown: 60 # How long should we wait for a scale out activity to complete?
        ScaleInCooldown: 120 # How long should we wait in between scale in activities?
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 65
  ECSServiceMemoryAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-autoscaling-policy-mem', '-', !Ref ServiceResourceName]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleOutCooldown: 60 # How long should we wait for a scale out activity to complete?
        ScaleInCooldown: 120 # How long should we wait in between scale in activities?
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 85
  fsx:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionFSx
    Properties:
      TemplateURL: !Sub 'https://{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}.s3.${AWS::Region}.amazonaws.com/tenant-onboarding-fsx.yaml'
      Parameters:
        Environment: !Ref Environment
        TenantId: !Ref TenantId
        ServiceResourceName: !Ref ServiceResourceName
        ActiveDirectoryId: !Sub '{{resolve:ssm:/saas-boost/${Environment}/ACTIVE_DIRECTORY_ID}}'
        ActiveDirectoryDnsIps: !Sub '{{resolve:ssm:/saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_IPS}}'
        PrivateSubnetA: !Ref SubnetPrivateA
        PrivateSubnetB: !Ref SubnetPrivateB
        PrivateRouteTable: !Ref PrivateRouteTable
        VPC: !Ref VPC
        SaaSBoostBucket: !Sub '{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}'
        FileSystemType: !Ref FSxFileSystemType
        BackupRetention: !Ref FSxBackupRetention
        DailyBackupTime: !Ref FSxDailyBackupTime
        WeeklyMaintenanceTime: !Ref FSxWeeklyMaintenanceTime
        StorageCapacity: !Ref FileSystemStorage
        ThroughputCapacity: !Ref FileSystemThroughput
        ECSSecurityGroup: !Ref ECSSecurityGroup
        OntapVolumeSize: !Ref OntapVolumeSize
        Tier: !Ref Tier
  efs:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionEFS
    Properties:
      TemplateURL: !Sub 'https://{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}.s3.${AWS::Region}.amazonaws.com/tenant-onboarding-efs.yaml'
      Parameters:
        Environment: !Ref Environment
        TenantId: !Ref TenantId
        ServiceResourceName: !Ref ServiceResourceName
        VPC: !Ref VPC
        PrivateSubnetA: !Ref SubnetPrivateA
        PrivateSubnetB: !Ref SubnetPrivateB
        ECSSecurityGroup: !Ref ECSSecurityGroup
        EncryptEFS: !Ref EncryptEFS
        EFSLifecyclePolicy: !Ref EFSLifecyclePolicy
        Tier: !Ref Tier
  rds:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionRDS
    Properties:
      TemplateURL: !Sub 'https://{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}.s3.${AWS::Region}.amazonaws.com/tenant-onboarding-rds.yaml'
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Sub '{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}'
        TenantId: !Ref TenantId
        ServiceResourceName: !Ref ServiceResourceName
        VPC: !Ref VPC
        PrivateSubnetA: !Ref SubnetPrivateA
        PrivateSubnetB: !Ref SubnetPrivateB
        ECSSecurityGroup: !Ref ECSSecurityGroup
        RDSInstanceClass: !Ref RDSInstanceClass
        RDSEngine: !Ref RDSEngine
        RDSEngineVersion: !Ref RDSEngineVersion
        RDSParameterGroupFamily: !Ref RDSParameterGroupFamily
        RDSUsername: !Ref RDSUsername
        RDSPasswordParam: !Ref RDSPasswordParam
        RDSPort: !Ref RDSPort
        RDSDatabase: !Ref RDSDatabase
        RDSBootstrap: !Ref RDSBootstrap
        Tier: !Ref Tier
Outputs:
  RdsEndpoint:
    Condition: ProvisionRDS
    Description: RDS endpoint
    Value: !GetAtt rds.Outputs.RdsEndpoint