---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost Tenant Onboarding
Parameters:
  Environment:
    Description: Environment (test, uat, prod, etc.)
    Type: String
    Default: oct12
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
    Default: sb-oct12-artifacts-e7389e84-cdae
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
    Default: lambdas
    #Default: lambdas-2020-10-12-15-26
  TenantId:
    Description: The GUID for the tenant
    Type: String
  TenantSubDomain:
    Description: The subdomain for this tenant
    Type: String
  DockerHostOS:
    Description: Operating System to use for the Docker host
    Type: String
    # Can't have dashes or underscores in Mappings keys :(
    AllowedValues: [WIN2019FULL, WIN2019CORE, WIN1909CORE, WIN2016FULL, LINUX]
  DockerHostInstanceType:
    Description: EC2 instance type to use for non Fargate Docker hosts
    Type: String
    Default: t2.xlarge
  TaskMemory:
    Description: Fargate memory setting
    Type: Number
    AllowedValues: [512, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720]
    Default: 1024
  TaskCPU:
    Description: Fargate CPU setting
    Type: Number
    AllowedValues: [256, 512, 1024, 2048, 4096]
    Default: 512
  TaskCount:
    Description: Desired count of concurrent tasks for this tenant
    Type: Number
    Default: 1
  MaxTaskCount:
    Description: Maximum count of concurrent tasks for this tenant (max size we can auto scale up to)
    Type: Number
    Default: 1
  ContainerRepository:
    Description: The name of the ECR repository hosting the container image
    Type: String
    Default: ecsrepository-o9zf9rbljvnt
  ContainerPort:
    Description: The TCP port the container is listening on via EXPOSE in the Dockerfile
    Type: Number
    Default: 80
  ContainerHealthCheckPath:
    Description: The destination on the Container for the Load Balancer to use for health checks
    Type: String
    #Default: '/index.html'
    Default: /
  CodePipelineRoleArn:
    Description: The IAM role for CodePipeline
    Type: String
  ArtifactBucket:
    Description: The S3 bucket where CodePipeline should look for source artifacts
    Type: String
  CidrPrefix:
    Description: Prefix of Cidr for this tenant such as 10.1, 10.2 etc.
    Type: String
    #Default: 10.0
    Default: 10.10
  TransitGateway:
    Description: Id of Transit Gateway for Egress
    Type: String
    Default: tgw-0e8f91a21d14b1e5e
  TenantTransitGatewayRouteTable:
    Description: Id of the Tenants Route table for Transit Gateway
    Type: String
    Default: tgw-rtb-034f653af0d951d46
  EgressTransitGatewayRouteTable:
    Description: Id of the Egress Route table for Transit Gateway
    Type: String
    Default: tgw-rtb-06222a87e38f4df69
  DomainName:
    Description: The hosted zone domain name
    Type: String
  HostedZoneId:
    Description: The hosted zone id
    Type: String
  UseEFS:
    Description: Deploy the EFS nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  MountPoint:
    Description: Container mount point for EFS file system
    Type: String
  EncryptEFS:
    Description: Turn on EFS encryption at rest?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  EFSLifecyclePolicy:
    Description: Enable EFS IA lifecycle?
    Type: String
    AllowedValues:
      - NEVER
      - AFTER_7_DAYS
      - AFTER_14_DAYS
      - AFTER_30_DAYS
      - AFTER_60_DAYS
      - AFTER_90_DAYS
    Default: NEVER
# Elasticsearch config
  # ProvisionES:
  #   Description: Deploy the elasticsearch nested stack?
  #   Type: String
  #   AllowedValues: ['true', 'false']
  #   Default: 'true'
  UseES:
    Description: Deploy the Elasticsearch nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
  ElasticsearchVersion:
    Default: '6.2'
    Type: String
    ConstraintDescription: Must be an allowed AWS ES version (Major.Minor)
    AllowedValues: ['7.9', '7.8', '7.7', '7.4', '7.1', '6.8', '6.7', '6.5', '6.4', '6.3', '6.2', '6.0', '5.6', '5.5']
  ElasticsearchMasterInstanceType:
    Description: Instance type for master nodes.
    Type: String
    Default: t2.small.elasticsearch
    AllowedValues:
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.12xlarge.elasticsearch
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - c4.large.elasticsearch
      - c4.xlarge.elasticsearch
      - c4.2xlarge.elasticsearch
      - c4.4xlarge.elasticsearch
      - c4.8xlarge.elasticsearch
      - i2.xlarge.elasticsearch
      - i2.2xlarge.elasticsearch
      - m4.large.elasticsearch
      - m4.xlarge.elasticsearch
      - m4.2xlarge.elasticsearch
      - m4.4xlarge.elasticsearch
      - m4.10xlarge.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
      - r4.2xlarge.elasticsearch
      - r4.4xlarge.elasticsearch
      - r4.8xlarge.elasticsearch
      - r4.16xlarge.elasticsearch
      - m3.medium.elasticsearch
      - m3.large.elasticsearch
      - m3.xlarge.elasticsearch
      - m3.2xlarge.elasticsearch
      - r3.large.elasticsearch
      - r3.xlarge.elasticsearch
      - r3.2xlarge.elasticsearch
      - r3.4xlarge.elasticsearch
      - r3.8xlarge.elasticsearch
  ElasticsearchDataInstanceType:
    Description: Instance type for data nodes.
    Type: String
    Default: r5.2xlarge.elasticsearch
    AllowedValues:
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.12xlarge.elasticsearch
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - c4.large.elasticsearch
      - c4.xlarge.elasticsearch
      - c4.2xlarge.elasticsearch
      - c4.4xlarge.elasticsearch
      - c4.8xlarge.elasticsearch
      - i2.xlarge.elasticsearch
      - i2.2xlarge.elasticsearch
      - m4.large.elasticsearch
      - m4.xlarge.elasticsearch
      - m4.2xlarge.elasticsearch
      - m4.4xlarge.elasticsearch
      - m4.10xlarge.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
      - r4.2xlarge.elasticsearch
      - r4.4xlarge.elasticsearch
      - r4.8xlarge.elasticsearch
      - r4.16xlarge.elasticsearch
      - m3.medium.elasticsearch
      - m3.large.elasticsearch
      - m3.xlarge.elasticsearch
      - m3.2xlarge.elasticsearch
      - r3.large.elasticsearch
      - r3.xlarge.elasticsearch
      - r3.2xlarge.elasticsearch
      - r3.4xlarge.elasticsearch
      - r3.8xlarge.elasticsearch
  NumberOfMasterNodes:
    Description: How many dedicated master nodes you want to have. 3 is recommended.
    Type: Number
    Default: 3
    AllowedValues:
      - 3
      - 5
  NumberOfDataNodes:
    Description: How many data nodes you want to have. Multiples of your number of availability zones (2) is recommended.
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 20
    # CustomEndpoint:
    # Description: Name for custom endpoint
    # Type: string
  CustomEndpointEnabled:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  EnforceHTTPS:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  ESPortHTTP:
    Type: String
    Default: '80'
  ESPortHTTPS:
    Type: String
    Default: '443'
  TLSSecurityPolicy:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  # ElasticsearchName:
  #   Description: The name of the AWS Elasticsearch Service deployment.
  #   Type: String
  #   ConstraintDescription: Must be a valid AWS ES domain name prefix. The name must start with a
  #     lowercase letter and must be between 3 and 28 characters. Valid characters
  #     are a-z (lowercase only), 0-9, and - (hyphen).
  #   AllowedPattern: '[a-z][a-z0-9\\-]+'
  
# RDS config
  UseRDS:
    Description: Deploy the RDS nested stack?
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  RDSInstanceClass:
    Description: The compute and memory capacity of the DB instance
    Type: String
  RDSEngine:
    Description: The database engine
    Type: String
  RDSEngineVersion:
    Description: The version number of the database engine to use
    Type: String
  RDSParameterGroupFamily:
    Description: The database parameter group family supporting the engine and engine version. Only used for Aurora clusters.
    Type: String
  RDSMasterUsername:
    Description: The master username for the database
    Type: String
  RDSMasterPasswordParam:
    Description: The Parameter Store secure string parameter and version containing the master database password
    Type: String
  RDSPort:
    Description: The TCP port to connect to the database on
    Type: String
  RDSDatabase:
    Description: Optional. The name of the database to create.
    Type: String
  RDSBootstrap:
    Description: Optional. The filename of the SQL bootstrap file.
    Type: String
  MetricsStream:
    Description: Optional. The name of the Firehose delivery stream for the Metrics system.
    Type: String
  ALBAccessLogsBucket:
    Description: SaaS Boost bucket for Access logs
    Type: String
    Default: sb-oct12-albaccesslogs-15ofqujyc1ley
  EventBus:
    Description: Optional. SaaS boost Metering and Billing Event Bridge
    Type: String
    Default: sb-events-oct12-us-east-2
  BillingPlan:
    Description: The billing plan to assign this tenant to after the stack completes
    Type: String
    Default: plan_none
#Fsx for Windows
  UseFSx:
    Description: Deploy the FSX nested stack?
    Type: String
    AllowedValues: [true, false]
    Default: false
  FSxWeeklyMaintenanceTime:
    Description: Specify the preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone
    Default: '7:02:00'
    Type: String
  FSxStorageCapacity:
    Default: 32
    Description: Specify the storage capacity of the file system being created, in gibibytes.
      Valid values are 32 GiB - 65,536 GiB. Consider choosing a higher value for greater capacity.
    Type: Number
  FSxThroughputCapacity:
    Default: 8
    Description: Specify the throughput of the Amazon FSx file system. Valid values are 8 -  2048.
      Consider choosing a higher value for better performance.
    Type: Number
  FSxBackupRetention:
    Description: Specify the number of days to retain automatic backups.
      Setting this value to 0 disables the creation of automatic backups. The maximum retention period
      for backups is 35 days.
    Default: 7
    Type: Number
  FSxDailyBackupTime:
    Description: Specify the preferred time to take daily automatic backups, formatted HH:MM in the UTC time zone.
    Default: '01:00'
    Type: String
  FSxWindowsMountDrive:
    Description: Specify the Windows drive to mount the FSX file system in format G:, F:, etc.
    Default: G
    Type: String
  SSLCertArnParam:
    Description: The Parameter Store string parameter and version containing the certficate ARN to use
    Type: String
  #  Default: /saas-boost/<environment>/SSL_CERT_ARN:1
    Default: ''
  ## These params are here to read the image values from the public SSM. Leave the defaults
  WIN2019FULL:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-ECS_Optimized/image_id'
  WIN2019CORE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-ECS_Optimized/image_id'
  WIN1909CORE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-1909-English-Core-ECS_Optimized/image_id'
  WIN2016FULL:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-ECS_Optimized/image_id'
Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  ProvisionEFS: !Equals [!Ref UseEFS, 'true']
  ProvisionRDS: !Equals [!Ref UseRDS, 'true']
  ProvisionES: !Equals [!Ref UseES, 'true']
  WindowsOS: !Not [!Equals [!Ref DockerHostOS, 'LINUX']]
  HasCertificate: !Not [!Equals [!Ref SSLCertArnParam, '']]
  NoCertificate: !Not [Condition: HasCertificate]
  ESEnforceHTTPS_false: !Equals [ !Ref "EnforceHTTPS", "false" ]
  # FSX
  ProvisionFsx: !And
    - !Equals [!Ref UseFSx, 'true']
    - Condition: WindowsOS
  IsWin2019Full: !Equals [WIN2019FULL, !Ref DockerHostOS]
  IsWin2019Core: !Equals [WIN2019CORE, !Ref DockerHostOS]
  IsWin1909Core: !Equals [WIN1909CORE, !Ref DockerHostOS]
  
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${CidrPrefix}.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-vpc-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-pub-rt-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.32.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-pub-az1-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]

  SubnetPublicARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.96.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-pub-az2-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  SubnetPublicBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.0.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-priv-az1-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.64.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-priv-az2-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  TenantRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-priv-rt-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref TenantRouteTablePrivate
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB
      RouteTableId: !Ref TenantRouteTablePrivate
  # Attach tenant VPC to TGW
  TenantTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      Tags:
        - Key: Tenant
          Value:
            !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-tgwattach-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref VPC
  # Add Route from Egress back to this Tenant CIDR Range and attachment
  TenantRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Sub ${CidrPrefix}.0.0/16
      TransitGatewayAttachmentId: !Ref TenantTGWAttachment
      TransitGatewayRouteTableId: !Ref EgressTransitGatewayRouteTable
  # Associate the route table to this tenant TGW Attachment
  TenantVpcTgwAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TenantTGWAttachment
      TransitGatewayRouteTableId: !Ref TenantTransitGatewayRouteTable
  # Update VPC route tables to point towards transit gateway for appropriate target CIDR ranges
  UpdateRouteTable:
    Type: AWS::EC2::Route
    DependsOn: TenantTGWAttachment
    Properties:
      RouteTableId: !Ref TenantRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGateway
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
     

####Capacity Provider Changes
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Condition: WindowsOS
    Properties:
      Name: 
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-cp']]
      AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            TargetCapacity: 100
            Status: ENABLED
          ManagedTerminationProtection: ENABLED          
      Tags:
        - Key: Tenant
          Value: !Ref TenantId                 

  ClusterCapacityProviderAssociations:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Condition: WindowsOS
    Properties:
      Cluster: !Ref ECSCluster    
      CapacityProviders:
        - !Ref CapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider
          Base: 0
          Weight: 1

  CapacityProviderWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: WindowsOS
    DependsOn: ClusterCapacityProviderAssociations
  ClusterCapacityAssociationWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [WindowsOS, !Ref CapacityProviderWaitHandle, !Ref WaitHandle]
      Timeout: '1'
      Count: 0       

  DisableInstanceProtectionRole:
    Type: AWS::IAM::Role
    Condition: WindowsOS    
    Properties:
      RoleName: 
        Fn::Join:
          - ''
          - - 'sb-'
            - !Ref Environment
            - '-disable-protection-role-tenant-'
            - !Select [0, !Split ['-', !Ref TenantId]]
            - '-'
            - !Ref AWS::Region
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Join:
              - ''
              - - 'sb-'
                - !Ref Environment
                - '-disable-protection-policy-tenant-'
                - !Select [0, !Split ['-', !Ref TenantId]]
                - '-'
                - !Ref AWS::Region
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - autoscaling:SetInstanceProtection
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:autoscaling:*:"
                      - !Ref "AWS::AccountId"
                      - ":autoScalingGroup:*:autoScalingGroupName/tenant-"
                      - !Select [0, !Split ['-', !Ref TenantId]]
                      - "*"
  DisableInstanceProtectionLogs:
    Type: AWS::Logs::LogGroup
    Condition: WindowsOS
#    DeletionPolicy: Retain 
#    UpdateReplacePolicy: Retain   
    Properties:
      LogGroupName:
        Fn::Join: ['', ['/aws/lambda/tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-disable-protection']]
      RetentionInDays: 30
  DisableInstanceProtectionFunction:
    Type: AWS::Lambda::Function
    Condition: WindowsOS    
    DependsOn:
      - DisableInstanceProtectionLogs
    Properties:
      FunctionName: 
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-disable-protection']]           
      Role: !GetAtt DisableInstanceProtectionRole.Arn
      Runtime: java11
      Timeout: 870
      MemorySize: 640
      Handler: com.amazon.aws.partners.saasfactory.saasboost.DisableInstanceProtection
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/DisableInstanceProtection-lambda.zip
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
      Description: Disable instance protection to allow delete of Autoscaling group
  InvokeDisableInstanceProtection:
    Type: Custom::CustomResource
    Condition: WindowsOS
    DependsOn:
      - ECSService
    Properties:
      ServiceToken: !GetAtt DisableInstanceProtectionFunction.Arn     
      AutoScalingGroup: !Ref ECSAutoScalingGroup     
## end changes          

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-task-exec-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-task-exec-policy']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepository}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_MASTER_USERNAME
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_MASTER_PASSWORD
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_PORT
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_HOST
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_NAME
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}METRICS_STREAM
                  # Makes more sense to add parameter to tenant rather than in saas boost environment 
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_NAME
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_ENDPOINT
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_PORT
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_PORT_DEFAULT

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join: ['', ['/ecs/tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      RetentionInDays: 30
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-task-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-task-policy']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${MetricsStream}
              - Effect: Allow
                Action:
                  - events:DescribeEventBus
                  - events:PutEvents
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${EventBus}
              #added to access config files for tenant.
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${SaaSBoostBucket}/tenants/${TenantId}/*
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RequiresCompatibilities:
        Fn::If:
          - WindowsOS
          - - EC2
          - - FARGATE
      Memory: !If [WindowsOS, !Ref 'AWS::NoValue', !Ref TaskMemory]
      Cpu: !If [WindowsOS, !Ref 'AWS::NoValue', !Ref TaskCPU]
      NetworkMode: !If [WindowsOS, !Ref 'AWS::NoValue', awsvpc]
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
      ContainerDefinitions:
        - Name:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerRepository}:latest
          Cpu: !If [WindowsOS, !Ref TaskCPU, !Ref 'AWS::NoValue']
          Memory: !If [WindowsOS, !Ref TaskMemory, !Ref 'AWS::NoValue']
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            !If
              - ProvisionRDS
              -
                - Name: AWS_REGION
                  Value: !Ref AWS::Region
                - Name: TENANT_ID
                  Value: !Ref TenantId
                - Name: SAAS_BOOST_EVENT_BUS
                  Value: !Ref EventBus
                - Name: METRICS_STREAM
                  Value: !Ref MetricsStream
                - Name: DB_HOST
                  Value: !GetAtt rds.Outputs.RdsEndpoint
                - Name: DB_NAME
                  Value: !Ref RDSDatabase
                - Name: SAAS_BOOST_BUCKET
                  Value: !Ref SaaSBoostBucket
              - !If
                - ProvisionES
                -
                  - Name: AWS_REGION
                    Value: !Ref AWS::Region
                  - Name: TENANT_ID
                    Value: !Ref TenantId
                  - Name: SAAS_BOOST_EVENT_BUS
                    Value: !Ref EventBus
                  - Name: METRICS_STREAM
                    Value: !Ref MetricsStream
                  - Name: ES_CLUSTER_NAME
                    Value: !GetAtt es.Outputs.ESClusterName
                  - Name: ES_CLUSTER_ENDPOINT
                    Value: !GetAtt es.Outputs.ESDomainEndpoint
                  - Name: ES_CLUSTER_PORT
                    Value: !GetAtt es.Outputs.ESClusterPort
                  - Name: ES_CLUSTER_PORT_DEFAULT
                    Value: !GetAtt es.Outputs.ESClusterPortDefault
                - !Ref 'AWS::NoValue'

          MountPoints:
            !If
              - ProvisionEFS
              -
                - ContainerPath: !Ref MountPoint
                  SourceVolume: !GetAtt efs.Outputs.FileSystemId
              - !If
                - ProvisionFsx
                -
                 - ContainerPath: !Ref MountPoint
                   SourceVolume: fsxShare
                - !Ref 'AWS::NoValue'
          LinuxParameters:
            Fn::If:
              - WindowsOS
              - !Ref 'AWS::NoValue'
              - InitProcessEnabled: true
          Secrets:
            !If
              - ProvisionRDS
              -
                - Name: DB_MASTER_USERNAME
                  ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_MASTER_USERNAME
                - Name: DB_MASTER_PASSWORD
                  ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_MASTER_PASSWORD
                - Name: DB_PORT
                  ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_PORT
              - !Ref 'AWS::NoValue'
              
              # - !If
              #   - ProvisionES
              #   -
              #     - Name: ES_CLUSTER_NAME
              #       ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_NAME
              #     - Name: ES_CLUSTER_ENDPOINT
              #       ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_ENDPOINT
              #     - Name: ES_CLUSTER_PORT
              #       ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/ES_CLUSTER_PORT
              #   - !Ref 'AWS::NoValue'
            
      Volumes:
        !If
          - ProvisionEFS
          -
            - Name: !GetAtt efs.Outputs.FileSystemId
              EfsVolumeConfiguration: 
                FileSystemId: !GetAtt efs.Outputs.FileSystemId
          - !If
            - ProvisionFsx
            -
              - Name: fsxShare
                Host:
                  SourcePath: !Sub ${FSxWindowsMountDrive}\
            - !Ref 'AWS::NoValue'
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-sg']]
      GroupDescription: Access to Containers
      VpcId: !Ref VPC
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-alb-sg']]
      GroupDescription: Access to the load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
  ECSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      IpProtocol: '-1'
  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref ALBAccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: 'access-logs'
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      SecurityGroups: [!Ref ALBSecurityGroup]
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  # We either need an Auto Scaling Group, Instance Profile, and Launch Configuration (Windows/EC2)
  # Or we need an Target Group (Linux/Fargate)
  # per https://aws.amazon.com/blogs/containers/managing-compute-for-amazon-ecs-clusters-with-capacity-providers/
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition:
      WindowsOS
    Properties:
      AutoScalingGroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-asg']]
      VPCZoneIdentifier:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      LaunchConfigurationName: !Ref ECSLaunchConfiguration 
      NewInstancesProtectedFromScaleIn: true      
      MinSize: '0'
      MaxSize: '20'
      DesiredCapacity: '0'
      #Cooldown:
      #HealthCheckGracePeriod: 60
      #HealthCheckType:
      #MetricsCollection:
      #NotificationConfigurations:
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        #MinSuccessfulInstancesPercent: 0
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Condition: WindowsOS
    Properties:
      RoleName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-instance-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-instance-policy']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ContainerRepository}
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DeregisterContainerInstance
                  - ecs:RegisterContainerInstance
                  - ecs:SubmitAttachmentStateChanges
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSCluster}
              - Effect: Allow
                Action:
                  - ecs:Poll
                  - ecs:StartTelemetrySession
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !GetAtt ECSCluster.Arn
              - Effect: Allow
                Action:
                  - ecs:DiscoverPollEndpoint
                Resource: '*'
####Added for FSX file system
## this is to take place of AmazonSSMManagedInstanceCore and AmazonSSMDirectoryServiceAccess AWS policies
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_USER
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_PASSWORD
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_IPS
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_NAME
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/tenant/${TenantId}/WINDOWS_FSX_DNS_NAME
              - Effect: Allow
                Action:
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                Resource: '*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: WindowsOS
    Properties:
      Path: '/'
      Roles:
        - !Ref ECSInstanceRole
  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: WindowsOS
    ## Wait for Fsx before creating because FSX file system has to be provisioned for the mount
    DependsOn:  FsxWaitCondition
    Metadata:
      Comment: 'packages -> groups -> users-> sources -> files -> commands -> services'
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content:
                Fn::Join:
                  - ""
                  - - "[main]"
                    - "\n"
                    - "stack="
                    - !Ref "AWS::StackId"
                    - "\n"
                    - "region="
                    - !Ref "AWS::Region"
                    - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ""
                  - - "[cfn-auto-reloader-hook]"
                    - "\n"
                    - "triggers=post.update"
                    - "\n"
                    - "path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init"
                    - "\n"
                    - "action=cfn-init.exe -v -s "
                    - !Ref "AWS::StackId"
                    - " -r ECSLaunchConfiguration --region "
                    - !Ref "AWS::Region"
                    - "\n"
          #commands:
          #  01_import_powershell_module:
          #    command: powershell.exe -Command Import-Module ECSTools
          #  02_add_instance_to_cluster:
          #    command: !Sub powershell.exe -Command Initialize-ECSAgent -Cluster ${ECSCluster} -EnableTaskIAMRole
          #  03_set_awslogs_env_override:
          #    command: powershell.exe -Command [Environment]::SetEnvironmentVariable("ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE", $TRUE, "Machine")
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\etc\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !If
                - IsWin2019Full
                - !Ref WIN2019FULL
                - !If
                  - IsWin2019Core
                  - !Ref WIN2019CORE
                  - !If
                    - IsWin1909Core
                    - !Ref WIN1909CORE
                    - !Ref WIN2016FULL
      InstanceType: !Ref DockerHostInstanceType
      IamInstanceProfile: !Ref ECSInstanceProfile
      #KeyName:
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref ECSSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            <powershell>
            Start-Transcript -Path "C:\UserData.log" -Append
            Write-Output ("Download and install the CloudWatch agent")
            Invoke-WebRequest https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile c:\Windows\Temp\amazon-cloudwatch-agent.msi

            Start-Process msiexec.exe -Wait -ArgumentList '/I c:\Windows\Temp\amazon-cloudwatch-agent.msi /quiet'

            Write-Output ("Write a config file for the CloudWatch agent and then reload/restart the agent")
            cd $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent
            .\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a fetch-config -s

            # Setup the ECS agent to point to our cluster and enable task IAM role and the awslogs driver
            Import-Module ECSTools
            Initialize-ECSAgent -Cluster ${ECSCluster} -EnableTaskIAMRole -LoggingDrivers '["json-file","awslogs"]'

            # If you have task IAM roles, awslogs doesn't work unless you set this environment variable
            [Environment]::SetEnvironmentVariable("ECS_ENABLE_AWSLOGS_EXECUTIONROLE_OVERRIDE", $TRUE, "Machine")
            Restart-Service AmazonECS

            Write-Output ("UseFsx value is ${UseFSx}")
            If ('${UseFSx}' -eq 'true')  {
                # Add to domain
                Write-Output ("Add computer to domain and map drive to ${FSxWindowsMountDrive}")
                Write-Output ("Read SSM Parameters to join to domain")
                $username = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_USER).Parameters[0].Value
                $password = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_PASSWORD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
                $credential = New-Object System.Management.Automation.PSCredential($username,$password)
                $directoryName = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_NAME).Parameters[0].Value
                $ipdns = (Get-SSMParameterValue -Name /saas-boost/${Environment}/ACTIVE_DIRECTORY_DNS_IPS).Parameters[0].Value
                $ips = $ipdns.Split(",")
                $ip1 = $ips[0]

                Write-Output ("Add $ip1 as the DNS Server")
                # Get the VPC DNS server.
                $dnsclient = Get-DnsClientServerAddress -AddressFamily IPv4 | Where-Object {$_.ServerAddresses.Count -gt 0} | Select-Object -First 1

                # During retry, we should avoid adding duplicate DNS servers, if it was already added in the previous attempt.
                # VPC DNS server is the last one in the list.
                $vpcdns = $dnsclient.ServerAddresses | select -last 1

                # Set up the IPv4 address of the AD DNS server as the first DNS server on this machine
                $dnsserverstoupdate = $("{0},{1}" -f $ips[0], $vpcdns)
                Write-Output ("Adding AD DNS server addresses :{0} to the IPV4 interface Index:{1}." -f $dnsserverstoupdate, $dnsclient.InterfaceIndex)
                Set-DnsClientServerAddress -InterfaceIndex $dnsclient.InterfaceIndex -ServerAddresses $dnsserverstoupdate

                # Join the domain
                Write-Output ("Join Computer to Domain $directoryName")
                Add-Computer -DomainName $directoryName -Credential $credential -Verbose -WarningAction Ignore

                # $networkAdapter = Get-WmiObject Win32_NetworkAdapter -Filter "AdapterType = 'Ethernet 802.3'"
                # $networkAdapterName = ($networkAdapter | Select-Object -First 1).NetConnectionID
                # netsh.exe interface ipv4 add dnsservers name="$networkAdapterName" address=$ip1 index=1
                # Add-Computer -DomainName $directoryName -Credential $credential -Verbose -WarningAction Ignore

                Write-Output ("Setup mapping to file server")
                $fileserverDnsName = (Get-SSMParameterValue -Name /saas-boost/${Environment}/tenant/${TenantId}/WINDOWS_FSX_DNS_NAME).Parameters[0].Value
                $fileserverpath = "\\{0}\share" -f "$fileserverDnsName"

                # Map the share to local drive letter
                Write-Output ("Map $fileserverpath to ${FSxWindowsMountDrive}")
                New-SmbGlobalMapping -RemotePath $fileserverpath -Credential $credential -LocalPath ${FSxWindowsMountDrive} -RequirePrivacy $true -ErrorAction Stop
            }  # end if for UseFsx

            Write-Output ("Cfn-init and signal completion")
            # Now run the CloudFormation init config set
            cfn-init.exe -v -s ${AWS::StackId} -r ECSLaunchConfiguration --region ${AWS::Region}

            # And, finally signal CloudFormation that we're done setting up
            cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

            Stop-Transcript
            </powershell>
            <persist>true</persist>
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref ContainerHealthCheckPath
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: !If [WindowsOS, instance, ip]
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
  ALBListenerSSL:
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Fn::Join:
              - ''
              - - '{{resolve:ssm:'
                - !Ref SSLCertArnParam
                - '}}'
  ALBListenerForwardSSL:
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: '443'
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ECSLoadBalancer
  ALBListener:
    Condition: NoCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Port: 80
      Protocol: HTTP
  ALBRule:
    #This rule necessary for disable tenant functionalty
    Condition: NoCertificate
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref ALBListener
      Priority: 1
  ALBSSLRule:
    #This rule necessary for disable tenant functionalty
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref ALBListenerSSL
      Priority: 1
  ListenerSSLWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: HasCertificate
    DependsOn: ALBListenerForwardSSL
  ListenerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: NoCertificate
    DependsOn: ALBListener
  ListenerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [HasCertificate, !Ref ListenerSSLWaitHandle, !Ref ListenerWaitHandle]
      Timeout: '1'
      Count: 0    
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerWaitCondition
      - ClusterCapacityAssociationWaitCondition
    Properties:
      EnableExecuteCommand: !If [WindowsOS, false, true]
      ServiceName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: !If [WindowsOS, !Ref 'AWS::NoValue', FARGATE]
      # Initially set DesiredCount to zero so the resource stabilizes
      # CodePipeline will update it when deploying the task
      DesiredCount: 0
      NetworkConfiguration:
        !If
          - WindowsOS
          - !Ref 'AWS::NoValue'
          -
            AwsvpcConfiguration:
              SecurityGroups:
                - !Ref ECSSecurityGroup
              Subnets:
                - !Ref SubnetPrivateA
                - !Ref SubnetPrivateB
      #Role: The SaaS Boost installer makes sure the ECS service linked role is available
      LoadBalancers:
        - ContainerName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup
      CapacityProviderStrategy:
        !If
          - WindowsOS      
          - - CapacityProvider: !Ref CapacityProvider
              Base: 1
              Weight: 1          
          - !Ref 'AWS::NoValue'
  ECSServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSCluster
      - ECSService
    Properties:
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MaxCapacity: !Ref MaxTaskCount
      MinCapacity: !Ref TaskCount
  ECSServiceCPUAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-autoscaling-policy-cpu']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleOutCooldown: 60 # How long should we wait for a scale out activity to complete?
        ScaleInCooldown: 120 # How long should we wait in between scale in activities?
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 65
  ECSServiceMemoryAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
            Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-autoscaling-policy-mem']]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleOutCooldown: 60 # How long should we wait for a scale out activity to complete?
        ScaleInCooldown: 120 # How long should we wait in between scale in activities?
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 85
  # Add Alias for Tenant into hosted zone
  TenantSubdomainRecordSetAlias:
     Type: AWS::Route53::RecordSet
     Condition: HasDomainName
     Properties:
       HostedZoneId: !Ref HostedZoneId
       Name: !Sub ${TenantSubDomain}.${DomainName}
       Type: 'A'
       AliasTarget:
         DNSName: !Sub dualstack.${ECSLoadBalancer.DNSName}
         HostedZoneId: !GetAtt ECSLoadBalancer.CanonicalHostedZoneID
         EvaluateTargetHealth: false
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - ECSCluster
      - ECSService
    Properties:
      Name:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      RoleArn: !Ref CodePipelineRoleArn
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey:
                  Fn::Join: ['', [!Ref TenantId, '/', 'tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: imgdef
        - Name: Deploy
          Actions:
            - Name: PreDeployAction
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              RunOrder: 1
              Configuration:
                FunctionName: !Sub sb-${Environment}-update-ecs
                UserParameters: !Sub '{"cluster":"${ECSCluster}","service":"${ECSService}","desiredCount":${TaskCount}}'
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 2
              Configuration:
                ClusterName:
                  Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
                ServiceName:
                  Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: imgdef

#### Fsx changes
# setup wait handle for dependency for launch config
  FsxWaitHandle:
    Condition: ProvisionFsx
    DependsOn: fsx
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  FsxWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If [ProvisionFsx, !Ref FsxWaitHandle, !Ref WaitHandle]
      Timeout: "1"
      Count: 0

  fsx:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionFsx
    DependsOn:
      - SubnetPublicA
      - SubnetPublicB
      - SubnetPublicARouteTable
      - SubnetPublicBRouteTable
      - RoutePublic
      - RouteTablePublic
      - InternetGateway
      - Subnet1RouteTableAssociation
      - Subnet2RouteTableAssociation
      - TenantRouteTablePrivate
      - TenantTGWAttachment
      - TenantRoute
      - TenantVpcTgwAssociation
      - UpdateRouteTable
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/tenant-onboarding-fsx.yaml
      TimeoutInMinutes: 30
      Parameters:
        Environment: !Ref Environment
        TenantId: !Ref TenantId
        ActiveDirectoryId: !Sub '{{resolve:ssm:/saas-boost/${Environment}/ACTIVE_DIRECTORY_ID:1}}'
        PrivateSubnet1ID: !Ref SubnetPrivateA
        PrivateSubnet2ID: !Ref SubnetPrivateB
        VPCID: !Ref VPC
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        BackupRetention: !Ref FSxBackupRetention
        DailyBackupTime: !Ref FSxDailyBackupTime
        WeeklyMaintenanceTime: !Ref FSxWeeklyMaintenanceTime
        StorageCapacity: !Ref FSxStorageCapacity
        ThroughputCapacity: !Ref FSxThroughputCapacity
        FSxAllowedCIDR: !Sub ${CidrPrefix}.0.0/16

  efs:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionEFS
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/tenant-onboarding-efs.yaml
      TimeoutInMinutes: 15
      Parameters:
        TenantId: !Ref TenantId
        VPC: !Ref VPC
        PrivateSubnetA: !Ref SubnetPrivateA
        PrivateSubnetB: !Ref SubnetPrivateB
        ECSSecurityGroup: !Ref ECSSecurityGroup
        EncryptEFS: !Ref EncryptEFS
        EFSLifecyclePolicy: !Ref EFSLifecyclePolicy

# ElasticSearch Extension
  es:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionES
    DependsOn:
      - SubnetPublicA
      - SubnetPublicB
      - SubnetPublicARouteTable
      - SubnetPublicBRouteTable
      - RoutePublic
      - RouteTablePublic
      - InternetGateway
      - Subnet1RouteTableAssociation
      - Subnet2RouteTableAssociation
      - TenantRouteTablePrivate
      - TenantTGWAttachment
      - TenantRoute
      - TenantVpcTgwAssociation
      - UpdateRouteTable
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/tenant-onboarding-es.yaml
      TimeoutInMinutes: 30
      Parameters:
        TenantId: !Ref TenantId
        VPC: !Ref VPC
        SubnetPublicA: !Ref SubnetPublicA
        # PrivateSubnetB: !Ref SubnetPrivateB
        ElasticsearchVersion: !Ref ElasticsearchVersion
        ECSSecurityGroup: !Ref ECSSecurityGroup
        ElasticsearchDataInstanceType: !Ref ElasticsearchDataInstanceType
        NumberOfDataNodes: !Ref NumberOfDataNodes
        EnforceHTTPS: !Ref EnforceHTTPS
        ESPort: !If [ESEnforceHTTPS_false, !Ref ESPortHTTPS, !Ref ESPortHTTP]
        ElasticsearchName: 
          Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-es-cluster']]
   
  rds:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionRDS
    # Have to make sure the entire network is still up when you delete
    # or we won't be able to call back to the CFN response URL      
    DependsOn:
      - SubnetPublicA
      - SubnetPublicB
      - SubnetPublicARouteTable
      - SubnetPublicBRouteTable
      - RoutePublic
      - RouteTablePublic
      - InternetGateway
      - Subnet1RouteTableAssociation
      - Subnet2RouteTableAssociation
      - TenantRouteTablePrivate
      - TenantTGWAttachment
      - TenantRoute
      - TenantVpcTgwAssociation
      - UpdateRouteTable
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/tenant-onboarding-rds.yaml
      TimeoutInMinutes: 30
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        TenantId: !Ref TenantId
        VPC: !Ref VPC
        PrivateSubnetA: !Ref SubnetPrivateA
        PrivateSubnetB: !Ref SubnetPrivateB
        ECSSecurityGroup: !Ref ECSSecurityGroup
        RDSInstanceClass: !Ref RDSInstanceClass
        RDSEngine: !Ref RDSEngine
        RDSEngineVersion: !Ref RDSEngineVersion
        RDSParameterGroupFamily: !Ref RDSParameterGroupFamily
        RDSMasterUsername: !Ref RDSMasterUsername
        RDSMasterPasswordParam: !Ref RDSMasterPasswordParam
        RDSPort: !Ref RDSPort
        RDSDatabase: !Ref RDSDatabase
        RDSBootstrap: !Ref RDSBootstrap
Outputs:
  LoadBalancer:
    Description: Full name for this tenant's application load balancer
    Value: !GetAtt ECSLoadBalancer.LoadBalancerFullName
  DNSName:
    Description: DNSName for this tenant's application load balancer
    Value: !GetAtt ECSLoadBalancer.DNSName
  RdsEndpoint:
    Condition: ProvisionRDS
    Description: RDS endpoint
    Value: !GetAtt rds.Outputs.RdsEndpoint
  BillingPlan:
    Description: Triggers event for creating a billing record for tenant
    Value: !Ref BillingPlan
...