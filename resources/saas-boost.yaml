---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost
Parameters:
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
    MinLength: 1
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
    Default: lambdas
  Environment:
    Description: SaaS Boost "environment" such as test, prod, beta, etc...
    Type: String
    MinLength: 1
  AdminEmailAddress:
    Description: Email address of admin user to receive temporary password notification
    Type: String
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid email address.
  DomainName:
    Description: The domain your workload is hosted at formatted as [env].[domain].[com]
    Type: String
    Default: ''
  HostedZone:
    Description: The existing Route53 hosted zone id for the domain name
    Type: String
    Default: ''
  PublicApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost public API
    Type: String
    Default: v1
  PrivateApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost private API
    Type: String
    Default: v1
  Version:
    Description: Version of SaaS Boost
    Type: String
    Default: 1.0
  DeployActiveDirectory:
    Description: Deploy Active Directory
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  ADPasswordParam:
    Description: SSM Parameter name to use for AD User password
    Type: String
  ApplicationServices:
    Description: Comma separated list of application service names to create ECR repositories for
    Type: String
    Default: ''
  CreateMacroResources:
    Description: Whether to create the Lambda, ExecutionRole, LogGroup, and CloudFormation macro for SaaS Boost environments
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
Conditions:
  ProvisionManagedAD: !Equals [!Ref DeployActiveDirectory, 'true']
  ShouldCreateMacroResources: !Equals [!Ref CreateMacroResources, 'true']
Resources:
  SSMSaaSBoostEnvironment:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_ENVIRONMENT
      Type: String
      Value: !Ref Environment
  SSMParamSaaSBoostBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_BUCKET
      Type: String
      Value: !Ref SaaSBoostBucket
  SSMParamLambdaSourceFolder:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_LAMBDAS_FOLDER
      Type: String
      Value: !Ref LambdaSourceFolder
  # Create all the S3 buckets SaaS Boost needs up front so we can create
  # a single Lambda IAM policy to clean up the buckets on stack delete
  Logging:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Day
            Status: 'Enabled'
            ExpirationInDays: 30
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Logging
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:aws:s3:::${Logging}/*
              - !Sub arn:aws:s3:::${Logging}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket needed for CodePipeline to drive tenant deployment workflow
  Pipelines:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: codepipeline-logs
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  CodePipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Pipelines
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:aws:s3:::${Pipelines}/*
              - !Sub arn:aws:s3:::${Pipelines}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket for Access Logs for ALBs for Tenants
  AccessLogs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Day
            Status: 'Enabled'
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket for Athena output for access log queries
  AthenaOutput:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter5Day
            Status: 'Enabled'
            ExpirationInDays: 5
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  AthenaOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaOutput
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:aws:s3:::${AthenaOutput}/*
              - !Sub arn:aws:s3:::${AthenaOutput}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket to host the admin console web application
  # NOTE: The deny non-secure policy is in the web template.
  AdminWeb:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: web-logs-
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket to hold optional tenant configuration files (zip archive)
  # Onboarding will be notified of put object events via EventBridge
  Resources:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - http://localhost:3000
              - !GetAtt web.Outputs.CloudFrontDistributionUrl
            AllowedMethods:
              - PUT
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  SaaSBoostUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-utils
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/Utils-lambda.zip
  ApiGatewayHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-apigw-helper
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ApiGatewayHelper-lambda.zip
  CloudFormationUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-cloudformation-utils
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CloudFormationUtils-lambda.zip
  ClearBucketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-clear-bucket-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-clear-bucket-policy-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                # We know all S3 buckets will have auto-generated names that are prefixed with the stack name
                # Using this wildcard instead of Fn::Ref to the bucket resources avoids circular dependencies
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-*/*
  ClearBucketLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-clear-bucket
      RetentionInDays: 30
  ClearBucket:
    Type: AWS::Lambda::Function
    DependsOn: ClearBucketLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-clear-bucket
      Role: !GetAtt ClearBucketExecutionRole.Arn
      Runtime: java11
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ClearS3Bucket
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ClearS3Bucket-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
         - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  InvokeClearCodePipelineBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Pipelines
  InvokeClearAthenaBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AthenaOutput
  InvokeClearAccessLogsBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AccessLogs
  InvokeClearWebsiteBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AdminWeb
  InvokeClearLoggingBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Logging
  InvokeClearResourcesBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Resources
  ApplicationServicesMacroExecutionRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateMacroResources
    DependsOn:
      - ApplicationServicesMacroLogs
    Properties:
      RoleName: !Sub saas-boost-app-services-macro-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: saas-boost-app-services-macro
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
  ApplicationServicesMacroLogs:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateMacroResources
    Properties:
      LogGroupName: /aws/lambda/saas-boost-app-services-macro
      RetentionInDays: 30
  ApplicationServicesMacroFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateMacroResources
    DependsOn: ApplicationServicesMacroLogs
    Properties:
      FunctionName: saas-boost-app-services-macro
      Role: !GetAtt ApplicationServicesMacroExecutionRole.Arn
      Runtime: java11
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ApplicationServicesEcrMacro
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ApplicationServicesEcrMacro-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  ApplicationServicesMacro:
    Type: AWS::CloudFormation::Macro
    Condition: ShouldCreateMacroResources
    Properties:
      # Can't use a parameter as part of a macro name when you include it in another template
      Name: saas-boost-app-services-macro
      FunctionName: !GetAtt ApplicationServicesMacroFunction.Arn
  CreateMacroWaitHandle:
    Condition: ShouldCreateMacroResources
    DependsOn: ApplicationServicesMacro
    Type: AWS::CloudFormation::WaitConditionHandle
  NoCreateMacroWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  MacroWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [ShouldCreateMacroResources, !Ref CreateMacroWaitHandle, !Ref NoCreateMacroWaitHandle]
      Timeout: '1'
      Count: 0
  SaaSBoostEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub sb-${Environment}-events
  SaaSBoostEventBusParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/EVENT_BUS
      Type: String
      Value: !Ref SaaSBoostEventBus
  CoreStackListenerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-core-stack-listener-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-core-stack-listener-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${SaaSBoostEventBus}
              - Effect: Allow
                Action:
                  - ecr:ListTagsForResource
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/sb-${Environment}-core-*
  CoreStackListenerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-core-stack-listener
      RetentionInDays: 30
  CoreStackListener:
    Type: AWS::Lambda::Function
    DependsOn: CoreStackListenerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-core-stack-listener
      Role: !GetAtt CoreStackListenerExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.CoreStackListener
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CoreStackListener-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          SAAS_BOOST_EVENT_BUS: !Ref SaaSBoostEventBus
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  CoreStackListenerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SaaS Boost Provisioning Notifications
      TopicName: !Sub sb-${Environment}-core-stack-listener
      KmsMasterKeyId: alias/aws/sns
  CoreStackListenerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt CoreStackListener.Arn
      TopicArn: !Ref CoreStackListenerTopic
  CoreStackListenerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CoreStackListener
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref CoreStackListenerTopic
  network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-network.yaml
      Parameters:
        Environment: !Ref Environment
  ad:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionManagedAD
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-managed-ad.yaml
      Parameters:
        Environment: !Ref Environment
        Subnets:
          !Join
            - ','
            - - !GetAtt network.Outputs.PrivateSubnet1
              - !GetAtt network.Outputs.PrivateSubnet2
        VpcId: !GetAtt network.Outputs.EgressVpc
        ADPasswordParam: !Ref ADPasswordParam
  web:
    Type: AWS::CloudFormation::Stack
    # Make sure we delete the web stack before clearing out the logging bucket or new logs
    # from S3 website hosting may be generated between clearing the bucket and trying to
    # delete the bucket
    DependsOn: InvokeClearLoggingBucket
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-web.yaml
      Parameters:
        Environment: !Ref Environment
        AdminEmailAddress: !Ref AdminEmailAddress
        WebS3Bucket: !Ref AdminWeb
  core:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - network
      - MacroWaitCondition
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-core.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        CodePipelineBucket: !Ref Pipelines
        PublicApiStage: !Ref PublicApiStage
        PrivateApiStage: !Ref PrivateApiStage
        ApplicationServices: !Ref ApplicationServices
        DomainName: !Ref DomainName
        HostedZone: !Ref HostedZone
        EventBus: !Ref SaaSBoostEventBus
      NotificationARNs:
        - !Ref CoreStackListenerTopic
  billing:
    Type: AWS::CloudFormation::Stack
    DependsOn: core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-billing.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
  # To Do - merge this stuff into the billing template
  metering:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-metering-billing.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        EventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
  metrics:
    Type: AWS::CloudFormation::Stack
    # Delete the metrics stack before clearing the S3 buckets because the metrics stack defines
    # EventBridge timers that could write to the bucket after clearing but before deleting
    DependsOn:
      - InvokeClearAthenaBucket
      - InvokeClearAccessLogsBucket
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-metrics.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        AccessLogs: !Ref AccessLogs
        AthenaOutput: !Ref AthenaOutput
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
  onboarding:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-onboarding.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
        ResourcesBucket: !Ref Resources
  quota:
    Type: AWS::CloudFormation::Stack
    DependsOn: core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-quota.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
  settings:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-settings.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
        ResourcesBucket: !Ref Resources
  tenant:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-tenant.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        ResourcesBucket: !Ref Resources
  tier:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-tier.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
  user:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-svc-user.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CognitoUserPoolId: !GetAtt web.Outputs.SBUserPool
  publicapi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-public-api.yaml
      Parameters:
        Environment: !Ref Environment
        PublicApi: !GetAtt core.Outputs.SaaSBoostPublicApi
        RootResourceId: !GetAtt core.Outputs.SaaSBoostPublicApiRootResourceId
        PublicApiStage: !Ref PublicApiStage
        CognitoUserPoolId: !GetAtt web.Outputs.SBUserPool
        BillingServiceGetPlans: !GetAtt billing.Outputs.BillingServiceGetPlansArn
        MetricsServiceQuery: !GetAtt metrics.Outputs.QueryArn
        MetricsServiceDatasets: !GetAtt metrics.Outputs.DatasetsArn
        MetricsServiceAlbQuery: !GetAtt metrics.Outputs.AlbQueryArn
        OnboardingServiceGetAll: !GetAtt onboarding.Outputs.OnboardingServiceGetAllArn
        OnboardingServiceStart: !GetAtt onboarding.Outputs.OnboardingServiceStartArn
        OnboardingServiceById: !GetAtt onboarding.Outputs.OnboardingServiceByIdArn
        SettingsServiceGetAll: !GetAtt settings.Outputs.SettingsServiceGetAllArn
        SettingsServiceById: !GetAtt settings.Outputs.SettingsServiceByIdArn
        SettingsServiceOptions: !GetAtt settings.Outputs.SettingsServiceOptionsArn
        SettingsServiceGetAppConfig: !GetAtt settings.Outputs.SettingsServiceGetAppConfigArn
        SettingsServiceUpdateAppConfig: !GetAtt settings.Outputs.SettingsServiceUpdateAppConfigArn
        TenantServiceGetAll: !GetAtt tenant.Outputs.TenantServiceGetAllArn
        TenantServiceById: !GetAtt tenant.Outputs.TenantServiceByIdArn
        TenantServiceUpdate: !GetAtt tenant.Outputs.TenantServiceUpdateArn
        TenantServiceDelete: !GetAtt tenant.Outputs.TenantServiceDeleteArn
        TenantServiceEnable: !GetAtt tenant.Outputs.TenantServiceEnableArn
        TenantServiceDisable: !GetAtt tenant.Outputs.TenantServiceDisableArn
        TierServiceGetAll: !GetAtt tier.Outputs.TierServiceGetAllArn
        TierServiceGetById: !GetAtt tier.Outputs.TierServiceGetByIdArn
        TierServiceUpdate: !GetAtt tier.Outputs.TierServiceUpdateArn
        TierServiceCreate: !GetAtt tier.Outputs.TierServiceCreateArn
        TierServiceDelete: !GetAtt tier.Outputs.TierServiceDeleteArn
        UserServiceGetAll: !GetAtt user.Outputs.UserServiceGetAllArn
        UserServiceInsert: !GetAtt user.Outputs.UserServiceInsertArn
        UserServiceById: !GetAtt user.Outputs.UserServiceByIdArn
        UserServiceUpdate: !GetAtt user.Outputs.UserServiceUpdateArn
        UserServiceDelete: !GetAtt user.Outputs.UserServiceDeleteArn
        UserServiceEnable: !GetAtt user.Outputs.UserServiceEnableArn
        UserServiceDisable: !GetAtt user.Outputs.UserServiceDisableArn
        UserServiceToken: !GetAtt user.Outputs.UserServiceTokenArn
  privateapi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.amazonaws.com/saas-boost-private-api.yaml
      Parameters:
        Environment: !Ref Environment
        PrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        RootResourceId: !GetAtt core.Outputs.SaaSBoostPrivateApiRootResourceId
        PrivateApiStage: !Ref PrivateApiStage
        QuotasServiceCheck: !GetAtt quota.Outputs.QuotasServiceCheckArn
        TenantServiceById: !GetAtt tenant.Outputs.TenantServiceByIdArn
        TenantServiceInsert: !GetAtt tenant.Outputs.TenantServiceInsertArn
        TenantServiceGetAll: !GetAtt tenant.Outputs.TenantServiceGetAllArn
        TenantServiceDelete: !GetAtt tenant.Outputs.TenantServiceDeleteArn
        SettingsServiceGetAll: !GetAtt settings.Outputs.SettingsServiceGetAllArn
        SettingsServiceGetSecret: !GetAtt settings.Outputs.SettingsServiceGetSecretArn
        SettingsServiceDeleteAppConfig: !GetAtt settings.Outputs.SettingsServiceDeleteAppConfigArn
        SettingsServiceGetAppConfig: !GetAtt settings.Outputs.SettingsServiceGetAppConfigArn
  SSMParamMetricsAnalyticsDeployed:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/METRICS_ANALYTICS_DEPLOYED
      Type: String
      # start out as false and will update when stack is deployed separately
      Value: 'false'
  SSMParamVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/VERSION
      Type: String
      Value: !Ref Version
  SSMParamSaaSBoostStack:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_STACK
      Type: String
      Value: !Ref AWS::StackName
  SSMParamALBOutputBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ACCESS_LOGS_BUCKET
      Type: String
      Value: !Ref AccessLogs
  SSMParamCodePipelineBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CODE_PIPELINE_BUCKET
      Type: String
      Value: !Ref Pipelines
  SSMParamResourcesBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/RESOURCES_BUCKET
      Type: String
      Value: !Ref Resources
  SSMParamAdminWebBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN_WEBSITE_BUCKET
      Type: String
      Value: !Ref AdminWeb
  SSMParamLambdaUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/UTILS_LAYER
      Type: String
      Value: !Ref SaaSBoostUtilsLayer
  SSMParamLambdaCloudFormationUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CFN_UTILS_LAYER
      Type: String
      Value: !Ref CloudFormationUtilsLayer
Outputs:
  SaaSBoostBucket:
    Description: S3 bucket with Saas Boost resources
    Value: !Ref SaaSBoostBucket
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:saasBoostBucket
  WebS3Bucket:
    Description: S3 bucket for web assets
    Value: !Ref AdminWeb
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:webBucket
  CodePipelineBucket:
    Description: S3 bucket for CodePipeline artifacts
    Value: !Ref Pipelines
  AthenaOutputBucket:
    Description: S3 bucket for Athena queries output
    Value: !Ref AthenaOutput
  AccessLogsBucket:
    Description: S3 bucket for ALB access logs
    Value: !Ref AccessLogs
  LoggingBucket:
    Description: S3 bucket for s3 access logging
    Value: !Ref Logging
  SaaSBoostUtilsLayer:
    Description: SaaS Boost Utils Layer
    Value: !Ref SaaSBoostUtilsLayer
  ApiGatewayHelperLayer:
    Description: SaaS Boost Private API Layer
    Value: !Ref ApiGatewayHelperLayer
  CloudFormationUtilsLayer:
    Description: SaaS Boost CloudFormation Utils Layer
    Value: !Ref CloudFormationUtilsLayer
  EventBus:
    Description: SaaS Boost Eventbridge Bus
    Value: !Ref SaaSBoostEventBus
  EgressVpc:
    Description: Egress VPC Id
    Value: !GetAtt network.Outputs.EgressVpc
  TransitGateway:
    Description: Transit Gateway for Egress to Public Internet
    Value: !GetAtt network.Outputs.TransitGateway
  TenantTransitGatewayRouteTable:
    Description: Transit Gateway Route table for tenant
    Value: !GetAtt network.Outputs.TenantTransitGatewayRouteTable
  EgressTransitGatewayRouteTable:
    Description: Transit Gateway Route table for egress
    Value: !GetAtt network.Outputs.EgressTransitGatewayRouteTable
  PublicSubnet1:
    Description: Public Subnet AZ 1
    Value: !GetAtt network.Outputs.PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet AZ 2
    Value: !GetAtt network.Outputs.PublicSubnet2
  PrivateSubnet1:
    Description: Private Subnet AZ 1
    Value: !GetAtt network.Outputs.PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet AZ 2
    Value: !GetAtt network.Outputs.PrivateSubnet2
...