---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost
Parameters:
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
    MinLength: 1
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
    Default: lambdas
  Environment:
    Description: SaaS Boost "environment" such as test, prod, beta, etc...
    Type: String
    MinLength: 1
  SystemIdentityProvider:
    Description: Identity Provider for the SaaS Boost system users and control plane API authorization
    Type: String
    Default: COGNITO
    AllowedValues: [COGNITO, KEYCLOAK]
  SystemIdentityProviderDomain:
    Description: Custom domain name for the SaaS Boost control plane IdP (e.g. auth.example.com)
    Type: String
    Default: ''
  SystemIdentityProviderHostedZone:
    Description: Route53 hosted zone id for SystemIdentityProviderDomain to create the ALB record set alias
    Type: String
    Default: ''
  SystemIdentityProviderCertificate:
    Description: TLS/SSL certificate ARN for SystemIdentityProviderDomain to use with the ALB
    Type: String
  AdminWebAppDomain:
    Description: Custom donain name for the SaaS Boost admin web app (e.g. saas-boost.example.com)
    Type: String
    Default: ''
  AdminWebAppHostedZone:
    Description: Route53 hosted zone id for AdminWebAppDomain to create the CloudFront record set alias
    Type: String
    Default: ''
  AdminWebAppCertificate:
    Description: TLS/SSL certificate ARN for AdminWebAppDomain to use with CloudFront
    Type: String
  AdminUsername:
    Description: Initial administrative user name for SaaS Boost admin web app
    Type: String
    Default: admin
  AdminEmailAddress:
    Description: Email address of admin user to receive temporary password notification
    Type: String
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid email address.
  PublicApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost public API
    Type: String
    Default: v1
  PrivateApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost private API
    Type: String
    Default: v1
  Version:
    Description: Version of SaaS Boost
    Type: String
    Default: 1.0
  DeployActiveDirectory:
    Description: Deploy Active Directory
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  ADPasswordParam:
    Description: SSM Parameter name to use for AD User password
    Type: String
  ApplicationServices:
    Description: Comma separated list of application service names to create ECR repositories for
    Type: String
    Default: ''
  AppExtensions:
    Description: Comma separated list of extension names to apply to the entire application
    Type: String
    Default: ''
  CreateMacroResources:
    Description: Whether to create the Lambda, ExecutionRole, LogGroup, and CloudFormation macro for SaaS Boost environments
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
Conditions:
  ProvisionManagedAD: !Equals [!Ref DeployActiveDirectory, 'true']
  ShouldCreateMacroResources: !Equals [!Ref CreateMacroResources, 'true']
  UseCognito: !Equals [!Ref SystemIdentityProvider, 'COGNITO']
  UseKeycloak: !Equals [!Ref SystemIdentityProvider, 'KEYCLOAK']
  InChinaRegion: !Equals [!Ref AWS::Partition, 'aws-cn']
  NotInChinaRegion: !Not [!Equals [!Ref AWS::Partition, 'aws-cn']]
  HasAdminWebAppCustomDomain: !Not [!Equals [!Ref AdminWebAppDomain, '']]
  HasSystemIdPCustomDomain: !Not [!Equals [!Ref SystemIdentityProviderDomain, '']]
  AdminWebAppCustomDomainInChina: !And [!Condition InChinaRegion, !Condition HasAdminWebAppCustomDomain]
  AdminWebAppCustomDomainNotInChina: !And [!Condition NotInChinaRegion, !Condition HasAdminWebAppCustomDomain]
Resources:
  SSMSaaSBoostEnvironment:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_ENVIRONMENT
      Type: String
      Value: !Ref Environment
  SSMParamSaaSBoostBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_BUCKET
      Type: String
      Value: !Ref SaaSBoostBucket
  SSMParamLambdaSourceFolder:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_LAMBDAS_FOLDER
      Type: String
      Value: !Ref LambdaSourceFolder
  # Create all the S3 buckets SaaS Boost needs up front so we can create
  # a single Lambda IAM policy to clean up the buckets on stack delete
  Logging:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Day
            Status: 'Enabled'
            ExpirationInDays: 30
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Logging
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Logging}/*
              - !Sub arn:${AWS::Partition}:s3:::${Logging}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket needed for CodePipeline to drive tenant deployment workflow
  Pipelines:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: codepipeline-logs
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  CodePipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Pipelines
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Pipelines}/*
              - !Sub arn:${AWS::Partition}:s3:::${Pipelines}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket for Access Logs for ALBs for Tenants
  AccessLogs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Day
            Status: 'Enabled'
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket for Athena output for access log queries
  AthenaOutput:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter5Day
            Status: 'Enabled'
            ExpirationInDays: 5
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  AthenaOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaOutput
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${AthenaOutput}/*
              - !Sub arn:${AWS::Partition}:s3:::${AthenaOutput}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket to hold optional tenant configuration files (zip archive)
  # Onboarding will be notified of put object events via EventBridge
  Resources:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          Fn::If:
            - HasAdminWebAppCustomDomain
            - - AllowedOrigins: [http://localhost:3000, !Sub 'https://${AdminWebAppDomain}']
                AllowedMethods: [PUT]
            - - AllowedOrigins: [http://localhost:3000, !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}']
                AllowedMethods: [PUT]
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket to host the admin console web application
  AdminWeb:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: web-logs-
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  AdminWebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        !Ref AdminWeb
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
          # TODO I think we have to set this differently for AWS China?
            Principal:
              CanonicalUser:
                !GetAtt AdminWebOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AdminWeb}/*
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${AdminWeb}/*
              - !Sub arn:${AWS::Partition}:s3:::${AdminWeb}
            Condition:
              Bool: {'aws:SecureTransport': false}
  AdminWebRecordSetAlias:
     Type: AWS::Route53::RecordSet
     Condition: HasAdminWebAppCustomDomain
     Properties:
       HostedZoneId: !Ref AdminWebAppHostedZone
       Name: !Ref AdminWebAppDomain
       Type: 'A'
       AliasTarget:
         DNSName: !GetAtt AdminWebCloudFrontDistribution.DomainName
         HostedZoneId: !If
           - InChinaRegion
           - Z3RFFRIM2A3IF5
           - Z2FDTNDATAQYW2
         EvaluateTargetHealth: false
  AdminWebOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${AdminWeb}
  AdminWebCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    # Make sure we delete the distribution before clearing out the logging bucket or new
    # logs from S3 website hosting may be generated between clearing the bucket and trying
    # to delete the bucket
    DependsOn: InvokeClearLoggingBucket
    Properties:
      DistributionConfig:
        Comment: Saas Boost Admin Console
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: false
        HttpVersion: http2
        Origins:
          - DomainName: !Sub ${AdminWeb}.s3.${AWS::Region}.${AWS::URLSuffix}
            Id: !Sub sb-${Environment}-s3-website
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${AdminWebOriginAccessIdentity}
        Aliases: !If
          - HasAdminWebAppCustomDomain
          - - !Ref AdminWebAppDomain
          - !Ref 'AWS::NoValue'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub sb-${Environment}-s3-website
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          ForwardedValues: !If
              - InChinaRegion
              - QueryString: true
                Cookies:
                  Forward: none
              - !Ref 'AWS::NoValue'
          # CachingOptimized managed cache policy
          CachePolicyId: !If [InChinaRegion, !Ref 'AWS::NoValue', 658327ea-f89d-4fab-a63d-7e88639e58f6]
          # CORS-S3Origin managed origin request policy
          OriginRequestPolicyId: !If [InChinaRegion, !Ref 'AWS::NoValue', 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf]
          # CORS-with-preflight-and-SecurityHeadersPolicy managed response headers policy
          ResponseHeadersPolicyId: eaab4381-ed33-4a86-88ca-d9558dc6cd63
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [HasAdminWebAppCustomDomain, !Ref 'AWS::NoValue', true]
          AcmCertificateArn: !If [AdminWebAppCustomDomainNotInChina, !Ref AdminWebAppCertificate, !Ref 'AWS::NoValue']
          IamCertificateId: !If [AdminWebAppCustomDomainInChina, !Ref AdminWebAppCertificate, !Ref 'AWS::NoValue']
          MinimumProtocolVersion: !If [HasAdminWebAppCustomDomain, TLSv1, !Ref 'AWS::NoValue']
          SslSupportMethod: !If [HasAdminWebAppCustomDomain, sni-only, !Ref 'AWS::NoValue']
  SaaSBoostUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-utils
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/Utils-lambda.zip
  ApiGatewayHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-apigw-helper
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ApiGatewayHelper-lambda.zip
  CloudFormationUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-cloudformation-utils
      CompatibleRuntimes: [java11]
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CloudFormationUtils-lambda.zip
  ClearBucketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-clear-bucket-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-clear-bucket-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                # We know all S3 buckets will have auto-generated names that are prefixed with the stack name
                # Using this wildcard instead of Fn::Ref to the bucket resources avoids circular dependencies
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-*/*
  ClearBucketLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-clear-bucket
      RetentionInDays: 30
  ClearBucket:
    Type: AWS::Lambda::Function
    DependsOn: ClearBucketLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-clear-bucket
      Role: !GetAtt ClearBucketExecutionRole.Arn
      Runtime: java11
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ClearS3Bucket
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ClearS3Bucket-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
         - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  ClearBucketLambdaArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CLEAR_BUCKET_ARN
      Type: String
      Value: !GetAtt ClearBucket.Arn
  InvokeClearCodePipelineBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Pipelines
  InvokeClearAthenaBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AthenaOutput
  InvokeClearAccessLogsBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AccessLogs
  InvokeClearWebsiteBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AdminWeb
  InvokeClearLoggingBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Logging
  InvokeClearResourcesBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Resources
  ClearEcrRepoExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-clear-ecr-repo-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-clear-ecr-repo-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecr:ListImages
                  - ecr:BatchDeleteImage
                Resource:
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/sb-${Environment}-*
  ClearEcrRepoLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-clear-ecr-repo
      RetentionInDays: 30
  ClearEcrRepo:
    Type: AWS::Lambda::Function
    DependsOn: ClearEcrRepoLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-clear-ecr-repo
      Role: !GetAtt ClearEcrRepoExecutionRole.Arn
      Runtime: java11
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ClearEcrRepo
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ClearEcrRepo-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
         - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  ApplicationServicesMacroExecutionRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateMacroResources
    DependsOn:
      - ApplicationServicesMacroLogs
    Properties:
      RoleName: !Sub saas-boost-app-services-macro-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: saas-boost-app-services-macro
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
  ApplicationServicesMacroLogs:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateMacroResources
    Properties:
      LogGroupName: /aws/lambda/saas-boost-app-services-macro
      RetentionInDays: 30
  ApplicationServicesMacroFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateMacroResources
    DependsOn: ApplicationServicesMacroLogs
    Properties:
      FunctionName: saas-boost-app-services-macro
      Role: !GetAtt ApplicationServicesMacroExecutionRole.Arn
      Runtime: java11
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ApplicationServicesMacro
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ApplicationServicesMacro-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  ApplicationServicesMacro:
    Type: AWS::CloudFormation::Macro
    Condition: ShouldCreateMacroResources
    Properties:
      # Can't use a parameter as part of a macro name when you include it in another template
      Name: saas-boost-app-services-macro
      FunctionName: !GetAtt ApplicationServicesMacroFunction.Arn
  CreateMacroWaitHandle:
    Condition: ShouldCreateMacroResources
    DependsOn: ApplicationServicesMacro
    Type: AWS::CloudFormation::WaitConditionHandle
  NoCreateMacroWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  MacroWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [ShouldCreateMacroResources, !Ref CreateMacroWaitHandle, !Ref NoCreateMacroWaitHandle]
      Timeout: '1'
      Count: 0
  SaaSBoostEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub sb-${Environment}-events
  SaaSBoostEventBusParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/EVENT_BUS
      Type: String
      Value: !Ref SaaSBoostEventBus
  CoreStackListenerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-core-stack-listener-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-core-stack-listener
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/${SaaSBoostEventBus}
              - Effect: Allow
                Action:
                  - ecr:ListTagsForResource
                Resource:
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/sb-${Environment}-core-*
  CoreStackListenerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-core-stack-listener
      RetentionInDays: 30
  CoreStackListener:
    Type: AWS::Lambda::Function
    DependsOn: CoreStackListenerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-core-stack-listener
      Role: !GetAtt CoreStackListenerExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.CoreStackListener
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CoreStackListener-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          SAAS_BOOST_EVENT_BUS: !Ref SaaSBoostEventBus
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  CoreStackListenerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SaaS Boost Provisioning Notifications
      TopicName: !Sub sb-${Environment}-core-stack-listener
      KmsMasterKeyId: alias/aws/sns
  CoreStackListenerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt CoreStackListener.Arn
      TopicArn: !Ref CoreStackListenerTopic
  CoreStackListenerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CoreStackListener
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref CoreStackListenerTopic
  network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-network.yaml
      Parameters:
        Environment: !Ref Environment
  ad:
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionManagedAD
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-managed-ad.yaml
      Parameters:
        Environment: !Ref Environment
        Subnets:
          !Join
            - ','
            - - !GetAtt network.Outputs.PrivateSubnet1
              - !GetAtt network.Outputs.PrivateSubnet2
        VpcId: !GetAtt network.Outputs.EgressVpc
        ADPasswordParam: !Ref ADPasswordParam
  idp:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-idp.yaml
      Parameters:
        IdentityProvider: !Ref SystemIdentityProvider
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        CodePipelineBucket: !Ref Pipelines
        CodePipelineUpdateEcsService: !GetAtt core.Outputs.CodePipelineUpdateEcsService
        StartCodeBuildLambda: !GetAtt core.Outputs.StartCodeBuildLambda
        CloudFormationWaitHandleCallback: !GetAtt core.Outputs.CodePipelineWaitHandler
        AdminUsername: !Ref AdminUsername
        AdminEmailAddress: !Ref AdminEmailAddress
        AdminWebUrl: !If
          - HasAdminWebAppCustomDomain
          - !Sub 'https://${AdminWebAppDomain}'
          - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
        CustomDomainName: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderDomain, '']
        CustomDomainHostedZone: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderHostedZone, '']
        CustomDomainCertificate: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderCertificate, '']
        ApiGatewayUrl: !Sub https://${core.Outputs.SaaSBoostPublicApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${PublicApiStage} #!GetAtt publicapi.Outputs.PublicApiGatewayEndpoint
        VPC: !GetAtt network.Outputs.EgressVpc
        ClearEcrRepoArn: !GetAtt ClearEcrRepo.Arn
        PrivateSubnets:
          !Join
            - ','
            - - !GetAtt network.Outputs.PrivateSubnet1
              - !GetAtt network.Outputs.PrivateSubnet2
        PublicSubnets:
          !Join
            - ','
            - - !GetAtt network.Outputs.PublicSubnet1
              - !GetAtt network.Outputs.PublicSubnet2
  web:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-web.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        StartCodeBuildLambda: !GetAtt core.Outputs.StartCodeBuildLambda
        AdminWebBucket: !Ref AdminWeb
        AdminWebUrl: !If
          - HasAdminWebAppCustomDomain
          - !Sub 'https://${AdminWebAppDomain}'
          - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
        ApiGatewayUrl: !Sub https://${core.Outputs.SaaSBoostPublicApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${PublicApiStage} #!GetAtt publicapi.Outputs.PublicApiGatewayEndpoint
        AdminWebClientId: !GetAtt idp.Outputs.AdminWebAppClient
        OidcIssuerUrl: !GetAtt idp.Outputs.OidcIssuerUrl
        OidcDomainUrl: !GetAtt idp.Outputs.OidcDomainUrl
        SystemIdentityProvider: !Ref SystemIdentityProvider
  core:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - network
      - MacroWaitCondition
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-core.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        CodePipelineBucket: !Ref Pipelines
        LoggingBucket: !Ref Logging
        PublicApiStage: !Ref PublicApiStage
        PrivateApiStage: !Ref PrivateApiStage
        ApplicationServices: !Ref ApplicationServices
        EventBus: !Ref SaaSBoostEventBus
        AppExtensions: !Ref AppExtensions
      NotificationARNs:
        - !Ref CoreStackListenerTopic
  billing:
    Type: AWS::CloudFormation::Stack
    DependsOn: core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-billing.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
  # To Do - merge this stuff into the billing template
  metering:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-metering-billing.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        EventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
  metrics:
    Type: AWS::CloudFormation::Stack
    # Delete the metrics stack before clearing the S3 buckets because the metrics stack defines
    # EventBridge timers that could write to the bucket after clearing but before deleting
    DependsOn:
      - InvokeClearAthenaBucket
      - InvokeClearAccessLogsBucket
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-metrics.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        AccessLogs: !Ref AccessLogs
        AthenaOutput: !Ref AthenaOutput
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
  onboarding:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-onboarding.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
        ResourcesBucket: !Ref Resources
  quota:
    Type: AWS::CloudFormation::Stack
    DependsOn: core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-quota.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
  settings:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-settings.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        SaaSBoostPrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        PrivateApiStage: !Ref PrivateApiStage
        ResourcesBucket: !Ref Resources
  tenant:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-tenant.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        ResourcesBucket: !Ref Resources
  tier:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-tier.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
  sysuser:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - core
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-system-user.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        IdentityProvider: !Ref SystemIdentityProvider
        CognitoUserPoolId: !If [UseCognito, !GetAtt idp.Outputs.CognitoUserPool, '']
        KeycloakHost: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakHost, '']
        KeycloakRealm: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakRealm, '']
  publicapi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-public-api.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        PublicApi: !GetAtt core.Outputs.SaaSBoostPublicApi
        RootResourceId: !GetAtt core.Outputs.SaaSBoostPublicApiRootResourceId
        PublicApiStage: !Ref PublicApiStage
        IdentityProvider: !Ref SystemIdentityProvider
        CognitoUserPoolId: !If [UseCognito, !GetAtt idp.Outputs.CognitoUserPool, '']
        KeycloakHost: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakHost, '']
        KeycloakRealm: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakRealm, '']
        BillingServiceGetPlans: !GetAtt billing.Outputs.BillingServiceGetPlansArn
        MetricsServiceQuery: !GetAtt metrics.Outputs.QueryArn
        MetricsServiceDatasets: !GetAtt metrics.Outputs.DatasetsArn
        MetricsServiceAlbQuery: !GetAtt metrics.Outputs.AlbQueryArn
        OnboardingServiceGetAll: !GetAtt onboarding.Outputs.OnboardingServiceGetAllArn
        OnboardingServiceStart: !GetAtt onboarding.Outputs.OnboardingServiceStartArn
        OnboardingServiceById: !GetAtt onboarding.Outputs.OnboardingServiceByIdArn
        SettingsServiceGetAll: !GetAtt settings.Outputs.SettingsServiceGetAllArn
        SettingsServiceById: !GetAtt settings.Outputs.SettingsServiceByIdArn
        SettingsServiceOptions: !GetAtt settings.Outputs.SettingsServiceOptionsArn
        SettingsServiceGetAppConfig: !GetAtt settings.Outputs.SettingsServiceGetAppConfigArn
        SettingsServiceUpdateAppConfig: !GetAtt settings.Outputs.SettingsServiceUpdateAppConfigArn
        TenantServiceGetAll: !GetAtt tenant.Outputs.TenantServiceGetAllArn
        TenantServiceById: !GetAtt tenant.Outputs.TenantServiceByIdArn
        TenantServiceUpdate: !GetAtt tenant.Outputs.TenantServiceUpdateArn
        TenantServiceDelete: !GetAtt tenant.Outputs.TenantServiceDeleteArn
        TenantServiceEnable: !GetAtt tenant.Outputs.TenantServiceEnableArn
        TenantServiceDisable: !GetAtt tenant.Outputs.TenantServiceDisableArn
        TierServiceGetAll: !GetAtt tier.Outputs.TierServiceGetAllArn
        TierServiceGetById: !GetAtt tier.Outputs.TierServiceGetByIdArn
        TierServiceUpdate: !GetAtt tier.Outputs.TierServiceUpdateArn
        TierServiceCreate: !GetAtt tier.Outputs.TierServiceCreateArn
        TierServiceDelete: !GetAtt tier.Outputs.TierServiceDeleteArn
        SystemUserServiceGetAll: !GetAtt sysuser.Outputs.SystemUserServiceGetAllArn
        SystemUserServiceInsert: !GetAtt sysuser.Outputs.SystemUserServiceInsertArn
        SystemUserServiceById: !GetAtt sysuser.Outputs.SystemUserServiceByIdArn
        SystemUserServiceUpdate: !GetAtt sysuser.Outputs.SystemUserServiceUpdateArn
        SystemUserServiceDelete: !GetAtt sysuser.Outputs.SystemUserServiceDeleteArn
        SystemUserServiceEnable: !GetAtt sysuser.Outputs.SystemUserServiceEnableArn
        SystemUserServiceDisable: !GetAtt sysuser.Outputs.SystemUserServiceDisableArn
  privateapi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-private-api.yaml
      Parameters:
        Environment: !Ref Environment
        PrivateApi: !GetAtt core.Outputs.SaaSBoostPrivateApi
        RootResourceId: !GetAtt core.Outputs.SaaSBoostPrivateApiRootResourceId
        PrivateApiStage: !Ref PrivateApiStage
        QuotasServiceCheck: !GetAtt quota.Outputs.QuotasServiceCheckArn
        TenantServiceById: !GetAtt tenant.Outputs.TenantServiceByIdArn
        TenantServiceInsert: !GetAtt tenant.Outputs.TenantServiceInsertArn
        TenantServiceGetAll: !GetAtt tenant.Outputs.TenantServiceGetAllArn
        TenantServiceDelete: !GetAtt tenant.Outputs.TenantServiceDeleteArn
        SettingsServiceGetAll: !GetAtt settings.Outputs.SettingsServiceGetAllArn
        SettingsServiceGetSecret: !GetAtt settings.Outputs.SettingsServiceGetSecretArn
        SettingsServiceDeleteAppConfig: !GetAtt settings.Outputs.SettingsServiceDeleteAppConfigArn
        SettingsServiceGetAppConfig: !GetAtt settings.Outputs.SettingsServiceGetAppConfigArn
  SSMParamMetricsAnalyticsDeployed:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/METRICS_ANALYTICS_DEPLOYED
      Type: String
      # start out as false and will update when stack is deployed separately
      Value: 'false'
  SSMParamVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/VERSION
      Type: String
      Value: !Ref Version
  SSMParamSaaSBoostStack:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_STACK
      Type: String
      Value: !Ref AWS::StackName
  SSMParamALBOutputBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ACCESS_LOGS_BUCKET
      Type: String
      Value: !Ref AccessLogs
  SSMParamCodePipelineBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CODE_PIPELINE_BUCKET
      Type: String
      Value: !Ref Pipelines
  SSMParamResourcesBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/RESOURCES_BUCKET
      Type: String
      Value: !Ref Resources
  SSMParamAdminWebBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN_WEBSITE_BUCKET
      Type: String
      Value: !Ref AdminWeb
  SSMParamLambdaUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/UTILS_LAYER
      Type: String
      Value: !Ref SaaSBoostUtilsLayer
  SSMParamLambdaCloudFormationUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CFN_UTILS_LAYER
      Type: String
      Value: !Ref CloudFormationUtilsLayer
Outputs:
  SaaSBoostBucket:
    Description: S3 bucket with Saas Boost resources
    Value: !Ref SaaSBoostBucket
  WebS3Bucket:
    Description: S3 bucket for web assets
    Value: !Ref AdminWeb
  AdminWebUrl:
    Description: Saas Boost admin web app URL
    Value: !If
      - HasAdminWebAppCustomDomain
      - !Sub 'https://${AdminWebAppDomain}'
      - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
  CodePipelineBucket:
    Description: S3 bucket for CodePipeline artifacts
    Value: !Ref Pipelines
  AthenaOutputBucket:
    Description: S3 bucket for Athena queries output
    Value: !Ref AthenaOutput
  AccessLogsBucket:
    Description: S3 bucket for ALB access logs
    Value: !Ref AccessLogs
  LoggingBucket:
    Description: S3 bucket for s3 access logging
    Value: !Ref Logging
  SaaSBoostUtilsLayer:
    Description: SaaS Boost Utils Layer
    Value: !Ref SaaSBoostUtilsLayer
  ApiGatewayHelperLayer:
    Description: SaaS Boost Private API Layer
    Value: !Ref ApiGatewayHelperLayer
  CloudFormationUtilsLayer:
    Description: SaaS Boost CloudFormation Utils Layer
    Value: !Ref CloudFormationUtilsLayer
  EventBus:
    Description: SaaS Boost Eventbridge Bus
    Value: !Ref SaaSBoostEventBus
  EgressVpc:
    Description: Egress VPC Id
    Value: !GetAtt network.Outputs.EgressVpc
  TransitGateway:
    Description: Transit Gateway for Egress to Public Internet
    Value: !GetAtt network.Outputs.TransitGateway
  TenantTransitGatewayRouteTable:
    Description: Transit Gateway Route table for tenant
    Value: !GetAtt network.Outputs.TenantTransitGatewayRouteTable
  EgressTransitGatewayRouteTable:
    Description: Transit Gateway Route table for egress
    Value: !GetAtt network.Outputs.EgressTransitGatewayRouteTable
  PublicSubnet1:
    Description: Public Subnet AZ 1
    Value: !GetAtt network.Outputs.PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet AZ 2
    Value: !GetAtt network.Outputs.PublicSubnet2
  PrivateSubnet1:
    Description: Private Subnet AZ 1
    Value: !GetAtt network.Outputs.PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet AZ 2
    Value: !GetAtt network.Outputs.PrivateSubnet2
...