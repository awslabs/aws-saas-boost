---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost
Parameters:
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
    MinLength: 1
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
    Default: lambdas
  Environment:
    Description: SaaS Boost "environment" such as test, prod, beta, etc...
    Type: String
    MinLength: 1
  SystemIdentityProvider:
    Description: Identity Provider for the SaaS Boost system users and control plane API authorization
    Type: String
    Default: COGNITO
    AllowedValues: [COGNITO, KEYCLOAK]
  SystemIdentityProviderDomain:
    Description: Custom domain name for the SaaS Boost control plane IdP (e.g. auth.example.com)
    Type: String
    Default: ''
  SystemIdentityProviderHostedZone:
    Description: Route53 hosted zone id for SystemIdentityProviderDomain to create the ALB record set alias
    Type: String
    Default: ''
  SystemIdentityProviderCertificate:
    Description: TLS/SSL certificate ARN for SystemIdentityProviderDomain to use with the ALB
    Type: String
  AdminWebAppDomain:
    Description: Custom donain name for the SaaS Boost admin web app (e.g. saas-boost.example.com)
    Type: String
    Default: ''
  AdminWebAppHostedZone:
    Description: Route53 hosted zone id for AdminWebAppDomain to create the CloudFront record set alias
    Type: String
    Default: ''
  AdminWebAppCertificate:
    Description: TLS/SSL certificate ARN for AdminWebAppDomain to use with CloudFront
    Type: String
  AdminUsername:
    Description: Initial administrative user name for SaaS Boost admin web app
    Type: String
    Default: admin
  AdminEmailAddress:
    Description: Email address of admin user to receive temporary password notification
    Type: String
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid email address.
  ApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost API
    Type: String
    Default: v1
  Version:
    Description: Version of SaaS Boost
    Type: String
    Default: 1.0
  AppPlaneAccountId:
    Description: Application Plane account to communicate with this Control Plane. Leave blank to use the same AWS account for your application plane resources.
    Type: String
    Default: ''
Conditions:
  UseCognito: !Equals [!Ref SystemIdentityProvider, 'COGNITO']
  UseKeycloak: !Equals [!Ref SystemIdentityProvider, 'KEYCLOAK']
  InChinaRegion: !Equals [!Ref AWS::Partition, 'aws-cn']
  NotInChinaRegion: !Not [!Equals [!Ref AWS::Partition, 'aws-cn']]
  HasAdminWebAppCustomDomain: !Not [!Equals [!Ref AdminWebAppDomain, '']]
  HasSystemIdPCustomDomain: !Not [!Equals [!Ref SystemIdentityProviderDomain, '']]
  AdminWebAppCustomDomainInChina: !And [!Condition InChinaRegion, !Condition HasAdminWebAppCustomDomain]
  AdminWebAppCustomDomainNotInChina: !And [!Condition NotInChinaRegion, !Condition HasAdminWebAppCustomDomain]
  AppPlaneSameAccount: !Equals ['', !Ref AppPlaneAccountId]
Resources:
  # Create all the S3 buckets SaaS Boost needs up front so we can create
  # a single Lambda IAM policy to clean up the buckets on stack delete
  Logging:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Day
            Status: 'Enabled'
            ExpirationInDays: 30
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Logging
      PolicyDocument:
        Statement:
          - Sid: DenyNonSecureTransport
            Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Logging}/*
              - !Sub arn:${AWS::Partition}:s3:::${Logging}
            Condition:
              Bool: { 'aws:SecureTransport': false }        
          - Sid: AllowLogging
            Effect: Allow
            Action: s3:PutObject
            Principal: 
              Service: 
                - logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Logging}/*
  Pipelines:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: codepipeline-logs
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket for Athena output for access log queries
  AthenaOutput:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter5Day
            Status: 'Enabled'
            ExpirationInDays: 5
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  AthenaOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaOutput
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${AthenaOutput}/*
              - !Sub arn:${AWS::Partition}:s3:::${AthenaOutput}
            Condition:
              Bool: { 'aws:SecureTransport': false }
  # Bucket to hold optional tenant configuration files (zip archive)
  # Onboarding will be notified of put object events via EventBridge
  Resources:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          Fn::If:
            - HasAdminWebAppCustomDomain
            - - AllowedOrigins: [http://localhost:3000, !Sub 'https://${AdminWebAppDomain}']
                AllowedMethods: [PUT]
            - - AllowedOrigins: [http://localhost:3000, !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}']
                AllowedMethods: [PUT]
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  # Bucket to host the admin console web application
  AdminWeb:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logging
        LogFilePrefix: web-logs-
      Tags:
        - Key: SaaS Boost
          Value: !Ref Environment
  AdminWebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        !Ref AdminWeb
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
          # TODO I think we have to set this differently for AWS China?
            Principal:
              CanonicalUser:
                !GetAtt AdminWebOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AdminWeb}/*
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${AdminWeb}/*
              - !Sub arn:${AWS::Partition}:s3:::${AdminWeb}
            Condition:
              Bool: {'aws:SecureTransport': false}
  AdminWebRecordSetAlias:
     Type: AWS::Route53::RecordSet
     Condition: HasAdminWebAppCustomDomain
     Properties:
       HostedZoneId: !Ref AdminWebAppHostedZone
       Name: !Ref AdminWebAppDomain
       Type: 'A'
       AliasTarget:
         DNSName: !GetAtt AdminWebCloudFrontDistribution.DomainName
         HostedZoneId: !If
           - InChinaRegion
           - Z3RFFRIM2A3IF5
           - Z2FDTNDATAQYW2
         EvaluateTargetHealth: false
  AdminWebOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${AdminWeb}
  AdminWebCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    # Make sure we delete the distribution before clearing out the logging bucket or new
    # logs from S3 website hosting may be generated between clearing the bucket and trying
    # to delete the bucket
    DependsOn: InvokeClearLoggingBucket
    Properties:
      DistributionConfig:
        Comment: Saas Boost Admin Console
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: false
        HttpVersion: http2
        Origins:
          - DomainName: !Sub ${AdminWeb}.s3.${AWS::Region}.${AWS::URLSuffix}
            Id: !Sub sb-${Environment}-s3-website
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${AdminWebOriginAccessIdentity}
        Aliases: !If
          - HasAdminWebAppCustomDomain
          - - !Ref AdminWebAppDomain
          - !Ref 'AWS::NoValue'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub sb-${Environment}-s3-website
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          ForwardedValues: !If
              - InChinaRegion
              - QueryString: true
                Cookies:
                  Forward: none
              - !Ref 'AWS::NoValue'
          # CachingOptimized managed cache policy
          CachePolicyId: !If [InChinaRegion, !Ref 'AWS::NoValue', 658327ea-f89d-4fab-a63d-7e88639e58f6]
          # CORS-S3Origin managed origin request policy
          OriginRequestPolicyId: !If [InChinaRegion, !Ref 'AWS::NoValue', 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf]
          # CORS-with-preflight-and-SecurityHeadersPolicy managed response headers policy
          ResponseHeadersPolicyId: eaab4381-ed33-4a86-88ca-d9558dc6cd63
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [HasAdminWebAppCustomDomain, !Ref 'AWS::NoValue', true]
          AcmCertificateArn: !If [AdminWebAppCustomDomainNotInChina, !Ref AdminWebAppCertificate, !Ref 'AWS::NoValue']
          IamCertificateId: !If [AdminWebAppCustomDomainInChina, !Ref AdminWebAppCertificate, !Ref 'AWS::NoValue']
          MinimumProtocolVersion: !If [HasAdminWebAppCustomDomain, TLSv1, !Ref 'AWS::NoValue']
          SslSupportMethod: !If [HasAdminWebAppCustomDomain, sni-only, !Ref 'AWS::NoValue']
  SaaSBoostUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-utils
      CompatibleRuntimes:
        - java17
      CompatibleArchitectures:
        - arm64
        - x86_64 
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/Utils-lambda.zip
  ApiGatewayHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-apigw-helper
      CompatibleRuntimes:
        - java17
      CompatibleArchitectures:
        - arm64
        - x86_64 
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ApiGatewayHelper-lambda.zip
  CloudFormationUtilsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-cloudformation-utils
      CompatibleRuntimes:
        - java17
      CompatibleArchitectures:
        - arm64
        - x86_64 
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CloudFormationUtils-lambda.zip
  KeycloakHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Condition: UseKeycloak
    Properties:
      LayerName: !Sub sb-${Environment}-keycloak-helper
      CompatibleRuntimes:
        - java17
      CompatibleArchitectures:
        - arm64
        - x86_64 
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/KeycloakHelper-lambda.zip
  SaaSBoostApiClientHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub sb-${Environment}-api-client-helper
      CompatibleRuntimes:
        - java17
        - java11
        - python3.11
        - python3.10
        - python3.9
        - python3.8
      CompatibleArchitectures:
        - arm64
        - x86_64
      Content:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/SaaSBoostApiClientHelper-lambda.zip
  SaaSBoostApiClientHelperLayerPermissions:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref SaaSBoostApiClientHelperLayer
      Principal:
        !If 
          - AppPlaneSameAccount
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          - !Sub arn:${AWS::Partition}:iam::${AppPlaneAccountId}:root
  ClearBucketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-clear-bucket-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-clear-bucket-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                # We know all S3 buckets will have auto-generated names that are prefixed with the stack name
                # Using this wildcard instead of Fn::Ref to the bucket resources avoids circular dependencies
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-*/*
  ClearBucketLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-clear-bucket
      RetentionInDays: 30
  ClearBucket:
    Type: AWS::Lambda::Function
    DependsOn: ClearBucketLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-clear-bucket
      Role: !GetAtt ClearBucketExecutionRole.Arn
      Runtime: java17
      Architectures:
        - arm64
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ClearS3Bucket
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ClearS3Bucket-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
         - !Ref CloudFormationUtilsLayer
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  ClearBucketLambdaArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CLEAR_BUCKET_ARN
      Type: String
      Value: !GetAtt ClearBucket.Arn
  InvokeClearCodePipelineBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Pipelines
  InvokeClearAthenaBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AthenaOutput
  InvokeClearWebsiteBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref AdminWeb
  InvokeClearLoggingBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Logging
  InvokeClearResourcesBucket:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ClearBucket.Arn
      Bucket: !Ref Resources
  ClearEcrRepoExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-clear-ecr-repo-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-clear-ecr-repo-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecr:ListImages
                  - ecr:BatchDeleteImage
                Resource:
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/sb-${Environment}-*
  ClearEcrRepoLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-clear-ecr-repo
      RetentionInDays: 30
  ClearEcrRepo:
    Type: AWS::Lambda::Function
    DependsOn: ClearEcrRepoLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-clear-ecr-repo
      Role: !GetAtt ClearEcrRepoExecutionRole.Arn
      Runtime: java17
      Architectures:
        - arm64
      Timeout: 900
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.ClearEcrRepo
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/ClearEcrRepo-lambda.zip
      Layers:
         - !Ref SaaSBoostUtilsLayer
         - !Ref CloudFormationUtilsLayer
      Tags:
        - Key: Application
          Value: SaaSBoost
        - Key: Environment
          Value: !Ref Environment
  SaaSBoostEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub sb-${Environment}-events
  SaaSBoostEventBusDlq:
    Type: AWS::SQS::Queue
  SaaSBoostEventBusDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: SaaSBoostEventBusDlq
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - SQS:SendMessage
            Resource: !GetAtt SaaSBoostEventBusDlq.Arn
            Principal:
              Service: events.amazonaws.com
  # Allow App Plane to publish certain SaaS Boost events to the Control Plane EventBus
  AppPlanePublishStatement:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref SaaSBoostEventBus
      StatementId: !Sub sb-${Environment}-app-plane-publish
      Statement:
        Effect: Allow
        Principal:
          AWS: !Sub arn:${AWS::Partition}:iam::${AppPlaneAccountId}:root
        Action:
          - events:PutEvents
        Resource:
          - !GetAtt SaaSBoostEventBus.Arn
        Condition:
          ForAnyValue:StringEquals:
            "events:detail-type":
              - Onboarding Validated
              - Onboarding Provisioning
              - Onboarding Provisioned
              - Onboarding Deploying
              - Onboarding Deployed
              - Onboarding Failed
              - Tenant Onboarding Status Changed
              - Tenant Resources Changed
          StringEquals:
            events:source: saas-boost
  # Allow App Plane to create rules and targets for Control Plane events
  AppPlaneRuleCreationStatement:
    Type: AWS::Events::EventBusPolicy
    Properties: 
      EventBusName: !Ref SaaSBoostEventBus
      StatementId: !Sub sb-${Environment}-app-plane-rule-creation
      Statement:
        Effect: Allow
        Principal:
          AWS: !Sub arn:${AWS::Partition}:iam::${AppPlaneAccountId}:root
        Action:
          - events:PutRule
          - events:DeleteRule
          - events:DescribeRule
          - events:DisableRule
          - events:EnableRule
          - events:PutTargets
          - events:RemoveTargets
        Resource:
          - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${SaaSBoostEventBus.Name}/*
        Condition:
          StringEqualsIfExists:
            "events:creatorAccount": "${aws:PrincipalAccount}"
            "events:source": saas-boost
  CodeBuildStartLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-start-build
      RetentionInDays: 30
  CodeBuildStartExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-start-build-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-start-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
  CodeBuildStartLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildStartLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-start-build
      Role: !GetAtt CodeBuildStartExecRole.Arn
      Runtime: java17
      Architectures:
        - arm64
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.StartCodeBuild
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/StartCodeBuild-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
  CodePipelineWaitHandlerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-pipeline-waithandler
      RetentionInDays: 30
  CodePipelineWaitHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-pipeline-waithandler-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-pipeline-waithandler-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: '*'
  CodePipelineWaitHandlerLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodePipelineWaitHandlerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-pipeline-waithandler
      Role: !GetAtt CodePipelineWaitHandlerExecRole.Arn
      Runtime: java17
      Architectures:
        - arm64
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.CodePipelineWaitHandler
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CodePipelineWaitHandler-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
  CodePipelineUpdateEcsServiceExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-update-ecs-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-update-ecs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-tenant*
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-keycloak
  CodePipelineUpdateEcsServiceLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-update-ecs
      RetentionInDays: 30
  CodePipelineUpdateEcsServiceLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodePipelineUpdateEcsServiceLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-update-ecs
      Role: !GetAtt CodePipelineUpdateEcsServiceExecRole.Arn
      Runtime: java17
      Architectures:
        - arm64
      Timeout: 300
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.EcsServiceUpdate
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/EcsServiceUpdate-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "ECSDeploy"
  SaaSBoostApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub sb-${Environment}-api
      EndpointConfiguration:
        Types:
          - REGIONAL
      MinimumCompressionSize: 2000
  # We only need a VPC for the control plane if we're self-hosting Keycloak
  network:
    Type: AWS::CloudFormation::Stack
    Condition: UseKeycloak
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-network.yaml
      Parameters:
        Environment: !Ref Environment
  idp:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-idp.yaml
      Parameters:
        IdentityProvider: !Ref SystemIdentityProvider
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        KeycloakHelperLayer: !If [UseKeycloak, !Ref KeycloakHelperLayer, '']
        CodePipelineBucket: !Ref Pipelines
        CodePipelineUpdateEcsService: !Ref CodePipelineUpdateEcsServiceLambda
        StartCodeBuildLambda: !GetAtt CodeBuildStartLambda.Arn
        CloudFormationWaitHandleCallback: !Ref CodePipelineWaitHandlerLambda
        AdminUsername: !Ref AdminUsername
        AdminEmailAddress: !Ref AdminEmailAddress
        AdminWebUrl: !If
          - HasAdminWebAppCustomDomain
          - !Sub 'https://${AdminWebAppDomain}'
          - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
        CustomDomainName: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderDomain, '']
        CustomDomainHostedZone: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderHostedZone, '']
        CustomDomainCertificate: !If [HasSystemIdPCustomDomain, !Ref SystemIdentityProviderCertificate, '']
        ApiGatewayUrl: !Sub https://${SaaSBoostApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ApiStage} #!GetAtt publicapi.Outputs.PublicApiGatewayEndpoint
        VPC: !If [UseKeycloak, !GetAtt network.Outputs.Vpc, '']
        ClearEcrRepoArn: !GetAtt ClearEcrRepo.Arn
        PrivateSubnets:
          !If
            - UseKeycloak
            - 
              !Join
                - ','
                - - !GetAtt network.Outputs.PrivateSubnet1
                  - !GetAtt network.Outputs.PrivateSubnet2
            - ''
        PublicSubnets:
          !If
            - UseKeycloak
            - 
              !Join
                - ','
                - - !GetAtt network.Outputs.PublicSubnet1
                  - !GetAtt network.Outputs.PublicSubnet2
            - ''
        AppPlaneAccountId: !Ref AppPlaneAccountId
  web:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-web.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        StartCodeBuildLambda: !GetAtt CodeBuildStartLambda.Arn
        AdminWebBucket: !Ref AdminWeb
        AdminWebUrl: !If
          - HasAdminWebAppCustomDomain
          - !Sub 'https://${AdminWebAppDomain}'
          - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
        ApiGatewayUrl: !Sub https://${SaaSBoostApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ApiStage} #!GetAtt publicapi.Outputs.PublicApiGatewayEndpoint
        AdminWebClientId: !GetAtt idp.Outputs.AdminWebAppClient
        OidcIssuerUrl: !GetAtt idp.Outputs.OidcIssuerUrl
        OidcDomainUrl: !GetAtt idp.Outputs.OidcDomainUrl
        SystemIdentityProvider: !Ref SystemIdentityProvider
  billing:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-billing.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
  # To Do - merge this stuff into the billing template
  #stripe:
  #  Type: AWS::CloudFormation::Stack
  #  Properties:
  #    TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-billing-stripe.yaml
  #    Parameters:
  #      Environment: !Ref Environment
  #      SaaSBoostBucket: !Ref SaaSBoostBucket
  #      LambdaSourceFolder: !Ref LambdaSourceFolder
  #      SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
  #      ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
  #      EventBus: !Ref SaaSBoostEventBus
  #      SaaSBoostApi: !Ref SaaSBoostApi
  #      ApiStage: !Ref ApiStage
  metrics:
    Type: AWS::CloudFormation::Stack
    # Delete the metrics stack before clearing the S3 buckets because the metrics stack defines
    # EventBridge timers that could write to the bucket after clearing but before deleting
    DependsOn:
      - InvokeClearAthenaBucket
      #- InvokeClearAccessLogsBucket
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-metrics.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        #AccessLogs: !Ref AccessLogs
        AthenaOutput: !Ref AthenaOutput
        SaaSBoostApi: !Ref SaaSBoostApi
        ApiStage: !Ref ApiStage
  onboarding:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-onboarding.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        ResourcesBucket: !Ref Resources
  settings:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-settings.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
  appconfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-app-config.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        CloudFormationUtilsLayer: !Ref CloudFormationUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        ResourcesBucket: !Ref Resources
  tenant:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-tenant.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        ApiGatewayHelperLayer: !Ref ApiGatewayHelperLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        ResourcesBucket: !Ref Resources
  tier:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-tier.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
  sysuser:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-system-user.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        KeycloakHelperLayer: !If [UseKeycloak, !Ref KeycloakHelperLayer, '']
        IdentityProvider: !Ref SystemIdentityProvider
        CognitoUserPoolId: !If [UseCognito, !GetAtt idp.Outputs.CognitoUserPool, '']
        KeycloakHost: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakHost, '']
        KeycloakRealm: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakRealm, '']
  identity:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-svc-identity.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        SaaSBoostEventBus: !Ref SaaSBoostEventBus
        AppPlaneAccountId: !If [AppPlaneSameAccount, !Ref AWS::AccountId, !Ref AppPlaneAccountId]
  api:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${SaaSBoostBucket}.s3.${AWS::Region}.${AWS::URLSuffix}/saas-boost-api.yaml
      Parameters:
        Environment: !Ref Environment
        SaaSBoostBucket: !Ref SaaSBoostBucket
        LambdaSourceFolder: !Ref LambdaSourceFolder
        SaaSBoostUtilsLayer: !Ref SaaSBoostUtilsLayer
        SaaSBoostApi: !Ref SaaSBoostApi
        RootResourceId: !GetAtt SaaSBoostApi.RootResourceId
        ApiStage: !Ref ApiStage
        IdentityProvider: !Ref SystemIdentityProvider
        CognitoUserPoolId: !If [UseCognito, !GetAtt idp.Outputs.CognitoUserPool, '']
        KeycloakHost: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakHost, '']
        KeycloakRealm: !If [UseKeycloak, !GetAtt idp.Outputs.KeycloakRealm, '']
        AdminWebAppClientId: !GetAtt idp.Outputs.AdminWebAppClient
        ApiAppClientId: !GetAtt idp.Outputs.ApiAppClient
        PrivateApiAppClientId: !GetAtt idp.Outputs.PrivateApiAppClient
        #BillingServiceGetPlans: !GetAtt billing.Outputs.BillingServiceGetPlansArn
        MetricsServiceQuery: !GetAtt metrics.Outputs.QueryArn
        MetricsServiceDatasets: !GetAtt metrics.Outputs.DatasetsArn
        MetricsServiceAlbQuery: !GetAtt metrics.Outputs.AlbQueryArn
        OnboardingServiceGetAll: !GetAtt onboarding.Outputs.OnboardingServiceGetAllArn
        OnboardingServiceInsert: !GetAtt onboarding.Outputs.OnboardingServiceInsertArn
        OnboardingServiceById: !GetAtt onboarding.Outputs.OnboardingServiceByIdArn
        SettingsServiceGetAll: !GetAtt settings.Outputs.SettingsServiceGetAllArn
        SettingsServiceById: !GetAtt settings.Outputs.SettingsServiceByIdArn
        SettingsServiceGetSecret: !GetAtt settings.Outputs.SettingsServiceGetSecretArn
        SettingsServiceUpdate: !GetAtt settings.Outputs.SettingsServiceUpdateArn
        AppConfigServiceOptions: !GetAtt appconfig.Outputs.AppConfigServiceOptionsArn
        AppConfigServiceGet: !GetAtt appconfig.Outputs.AppConfigServiceGetArn
        AppConfigServiceUpdate: !GetAtt appconfig.Outputs.AppConfigServiceUpdateArn
        AppConfigServiceDelete: !GetAtt appconfig.Outputs.AppConfigServiceDeleteArn
        TenantServiceGetAll: !GetAtt tenant.Outputs.TenantServiceGetAllArn
        TenantServiceInsert: !GetAtt tenant.Outputs.TenantServiceInsertArn
        TenantServiceById: !GetAtt tenant.Outputs.TenantServiceByIdArn
        TenantServiceUpdate: !GetAtt tenant.Outputs.TenantServiceUpdateArn
        TenantServiceDelete: !GetAtt tenant.Outputs.TenantServiceDeleteArn
        TenantServiceEnable: !GetAtt tenant.Outputs.TenantServiceEnableArn
        TenantServiceDisable: !GetAtt tenant.Outputs.TenantServiceDisableArn
        TierServiceGetAll: !GetAtt tier.Outputs.TierServiceGetAllArn
        TierServiceGetById: !GetAtt tier.Outputs.TierServiceGetByIdArn
        TierServiceUpdate: !GetAtt tier.Outputs.TierServiceUpdateArn
        TierServiceInsert: !GetAtt tier.Outputs.TierServiceInsertArn
        TierServiceDelete: !GetAtt tier.Outputs.TierServiceDeleteArn
        SystemUserServiceGetAll: !GetAtt sysuser.Outputs.SystemUserServiceGetAllArn
        SystemUserServiceInsert: !GetAtt sysuser.Outputs.SystemUserServiceInsertArn
        SystemUserServiceById: !GetAtt sysuser.Outputs.SystemUserServiceByIdArn
        SystemUserServiceUpdate: !GetAtt sysuser.Outputs.SystemUserServiceUpdateArn
        SystemUserServiceDelete: !GetAtt sysuser.Outputs.SystemUserServiceDeleteArn
        SystemUserServiceEnable: !GetAtt sysuser.Outputs.SystemUserServiceEnableArn
        SystemUserServiceDisable: !GetAtt sysuser.Outputs.SystemUserServiceDisableArn
        IdentityServiceGetProviders: !GetAtt identity.Outputs.IdentityServiceGetProvidersArn
        IdentityServiceGetProvider: !GetAtt identity.Outputs.IdentityServiceGetProviderArn
        IdentityServiceSetProvider: !GetAtt identity.Outputs.IdentityServiceSetProviderArn
  SSMParamEnvironment:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ENVIRONMENT
      Type: String
      Value: !Ref Environment
  SSMParamVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/VERSION
      Type: String
      Value: !Ref Version
  SSMParamSaaSBoostStack:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/STACK_NAME
      Type: String
      Value: !Ref AWS::StackName
  SSMParamSaaSBoostBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/SAAS_BOOST_BUCKET
      Type: String
      Value: !Ref SaaSBoostBucket
  SSMParamLambdaSourceFolder:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/LAMBDAS_FOLDER
      Type: String
      Value: !Ref LambdaSourceFolder
  SSMParamSaaSBoostEventBus:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/EVENT_BUS
      Type: String
      Value: !Ref SaaSBoostEventBus
  SSMParamCodePipelineBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CODE_PIPELINE_BUCKET
      Type: String
      Value: !Ref Pipelines
  SSMParamResourcesBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/RESOURCES_BUCKET
      Type: String
      Value: !Ref Resources
  SSMParamAdminWebBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ADMIN_WEBSITE_BUCKET
      Type: String
      Value: !Ref AdminWeb
  SSMParamLambdaUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/UTILS_LAYER
      Type: String
      Value: !Ref SaaSBoostUtilsLayer
  SSMParamLambdaCloudFormationUtilsLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CFN_UTILS_LAYER
      Type: String
      Value: !Ref CloudFormationUtilsLayer
  SSMParamApiClientHelperLayer:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/API_CLIENT_HELPER_LAYER
      Type: String
      Value: !Ref SaaSBoostApiClientHelperLayer
  SSMParamApiClientSecretArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/API_APP_CLIENT_SECRET
      Type: String
      Value: !GetAtt idp.Outputs.ApiAppClientSecret
  SSMParamApiClientSecretKeyArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/API_APP_CLIENT_KEY
      Type: String
      Value: !GetAtt idp.Outputs.ApiAppClientEncryptionKey
Outputs:
  SaaSBoostBucket:
    Description: S3 bucket with Saas Boost resources
    Value: !Ref SaaSBoostBucket
  WebS3Bucket:
    Description: S3 bucket for web assets
    Value: !Ref AdminWeb
  AdminWebUrl:
    Description: Saas Boost admin web app URL
    Value: !If
      - HasAdminWebAppCustomDomain
      - !Sub 'https://${AdminWebAppDomain}'
      - !Sub 'https://${AdminWebCloudFrontDistribution.DomainName}'
  CodePipelineBucket:
    Description: S3 bucket for CodePipeline artifacts
    Value: !Ref Pipelines
  AthenaOutputBucket:
    Description: S3 bucket for Athena queries output
    Value: !Ref AthenaOutput
  LoggingBucket:
    Description: S3 bucket for s3 access logging
    Value: !Ref Logging
  SaaSBoostUtilsLayer:
    Description: SaaS Boost Utils Layer
    Value: !Ref SaaSBoostUtilsLayer
  ApiGatewayHelperLayer:
    Description: SaaS Boost API Gateway Helper Layer
    Value: !Ref ApiGatewayHelperLayer
  CloudFormationUtilsLayer:
    Description: SaaS Boost CloudFormation Utils Layer
    Value: !Ref CloudFormationUtilsLayer
  KeycloakHelperLayer:
    Description: SaaS Boost Keycloak Helper Layer
    Value: !If [UseKeycloak, !Ref KeycloakHelperLayer, '']
  EventBus:
    Description: SaaS Boost Eventbridge Bus
    Value: !Ref SaaSBoostEventBus
  CodePipelineUpdateEcsService:
    Description: Lambda to update ECS desired count
    Value: !Ref CodePipelineUpdateEcsServiceLambda
  StartCodeBuildLambda:
    Description: Lambda ARN to trigger a CodeBuild project
    Value: !GetAtt CodeBuildStartLambda.Arn
  CodePipelineWaitHandler:
    Description: Lambda to process CloudFormation wait condition as part of a CodePipeline
    Value: !Ref CodePipelineWaitHandlerLambda
  SaaSBoostApiRootResourceId:
    Description: SaaS Boost API root resource id
    Value: !GetAtt SaaSBoostApi.RootResourceId
...
