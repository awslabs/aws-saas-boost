---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost Core Resources
Transform:
  - saas-boost-app-services-macro
Parameters:
  Environment:
    Description: SaaS Boost environment name
    Type: String
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
  SaaSBoostUtilsLayer:
    Description: Utils Layer ARN
    Type: String
  ApiGatewayHelperLayer:
    Description: API Gateway Helper Layer ARN
    Type: String
  CloudFormationUtilsLayer:
    Description: CloudFormation Utils Layer ARN
    Type: String
  CodePipelineBucket:
    Description: S3 bucket for CodePipeline artifacts
    Type: String
  LoggingBucket:
    Description: S3 bucket for S3 access logging
    Type: String
  PublicApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost public API
    Type: String
    Default: v1
  PrivateApiStage:
    Description: The API Gateway REST API stage name for the SaaS Boost private API
    Type: String
    Default: v1
  ApplicationServices:
    Description: Comma separated list of application service names to create ECR repositories for
    Type: String
    Default: ''
  AppExtensions:
    Description: Comma separated list of extension names to apply to the entire application
    Type: String
    Default: ''
  EventBus:
    Description: SaaS Boost Eventbridge Bus
    Type: String
Resources:
  WorkloadDeployLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-workload-deploy
      RetentionInDays: 30
  WorkloadDeployExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-workload-deploy-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-workload-deploy-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${CodePipelineBucket}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineBucket}/*
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt SaaSBoostSystemRole.Arn
  WorkloadDeployLambda:
    Type: AWS::Lambda::Function
    DependsOn: WorkloadDeployLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-workload-deploy
      Role: !GetAtt WorkloadDeployExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.WorkloadDeploy
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/WorkloadDeploy-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref ApiGatewayHelperLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          API_TRUST_ROLE: !GetAtt SaaSBoostSystemRole.Arn
          API_GATEWAY_HOST: !Sub ${SaaSBoostPrivateApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
          API_GATEWAY_STAGE: !Ref PrivateApiStage
          CODE_PIPELINE_BUCKET: !Ref CodePipelineBucket
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "ECSDeploy"
  WorkloadDeployEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: !Sub sb-${Environment}-workload-deploy-event
      Description: SaaS Boost tenant workload deploy events
      State: ENABLED
      EventPattern:
        {
          "source": [
            "saas-boost"
          ],
          "detail-type": [
            "Workload Ready For Deployment"
          ]
        }
      Targets:
        - Arn: !GetAtt WorkloadDeployLambda.Arn
          Id: !Sub sb-${Environment}-workload-deploy-event
  WorkloadDeployEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkloadDeployLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkloadDeployEventRule.Arn
  OnboardingStackListenerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-onboarding-listener-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-onboarding-listener
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/{{resolve:ssm:/saas-boost/${Environment}/EVENT_BUS}}'
  OnboardingStackListenerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-onboarding-listener
      RetentionInDays: 30
  OnboardingStackListener:
    Type: AWS::Lambda::Function
    DependsOn: OnboardingStackListenerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-onboarding-listener
      Role: !GetAtt OnboardingStackListenerExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.OnboardingStackListener
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/OnboardingStackListener-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          SAAS_BOOST_EVENT_BUS: !Sub '{{resolve:ssm:/saas-boost/${Environment}/EVENT_BUS}}'
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "Onboarding"
  OnboardingStackListenerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Tenant Onboarding Stack Notifications
      TopicName: !Sub sb-${Environment}-onboarding-listener
      KmsMasterKeyId: alias/aws/sns
  OnboardingStackListenerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt OnboardingStackListener.Arn
      TopicArn: !Ref OnboardingStackListenerTopic
  OnboardingStackListenerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OnboardingStackListener
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref OnboardingStackListenerTopic
  SSMParamOnboardingSNS:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ONBOARDING_STACK_SNS
      Type: String
      Value: !Ref OnboardingStackListenerTopic
  OnboardingAppStackListenerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-onboarding-app-listener
      RetentionInDays: 30
  OnboardingAppStackListener:
    Type: AWS::Lambda::Function
    DependsOn: OnboardingAppStackListenerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-onboarding-app-listener
      Role: !GetAtt OnboardingStackListenerExecRole.Arn # Can use the same IAM role as the tenant-onboarding.yaml stack
      Runtime: java11
      Timeout: 600
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.OnboardingAppStackListener
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/OnboardingAppStackListener-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          SAAS_BOOST_EVENT_BUS: !Sub '{{resolve:ssm:/saas-boost/${Environment}/EVENT_BUS}}'
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "Onboarding"
  OnboardingAppStackListenerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Tenant Onboarding App Stack Notifications
      TopicName: !Sub sb-${Environment}-onboarding-app-listener
      KmsMasterKeyId: alias/aws/sns
  OnboardingAppStackListenerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt OnboardingAppStackListener.Arn
      TopicArn: !Ref OnboardingAppStackListenerTopic
  OnboardingAppStackListenerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OnboardingAppStackListener
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref OnboardingAppStackListenerTopic
  SSMParamOnboardingAppSNS:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/ONBOARDING_APP_STACK_SNS
      Type: String
      Value: !Ref OnboardingAppStackListenerTopic
  TenantCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-tenant-pipeline-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonECS_FullAccess
      Policies:
        - PolicyName: !Sub sb-${Environment}-tenant-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    iamPassedToService:
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketVersioning
                Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineBucket}
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub arn:${AWS::Partition}:s3:::${CodePipelineBucket}/*
              - Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt CodePipelineUpdateEcsServiceLambda.Arn
  SSMParamCodePipelineRole:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/CODE_PIPELINE_ROLE
      Type: String
      Value: !GetAtt TenantCodePipelineRole.Arn
  CodePipelineUpdateEcsServiceExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-update-ecs-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-update-ecs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-tenant*
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-keycloak
  CodePipelineUpdateEcsServiceLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-update-ecs
      RetentionInDays: 30
  CodePipelineUpdateEcsServiceLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodePipelineUpdateEcsServiceLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-update-ecs
      Role: !GetAtt CodePipelineUpdateEcsServiceExecRole.Arn
      Runtime: java11
      Timeout: 300
      MemorySize: 512
      Handler: com.amazon.aws.partners.saasfactory.saasboost.EcsServiceUpdate
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/EcsServiceUpdate-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "ECSDeploy"
  SaaSBoostPublicApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub sb-${Environment}-public-api
      EndpointConfiguration:
        Types:
          - REGIONAL
  SaaSBoostPrivateApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub sb-${Environment}-private-api
      EndpointConfiguration:
        Types:
          - REGIONAL
  SaaSBoostSystemRole:
    Type: AWS::IAM::Role
    DependsOn:
      - SaaSBoostPublicApi
      - SaaSBoostPrivateApi
    Properties:
      RoleName: !Sub sb-${Environment}-private-api-trust-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-private-api-trust-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource:
                  - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SaaSBoostPrivateApi}/*/*/*
                  - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${SaaSBoostPublicApi}/*/*/*
  SSMParamPrivateApiRole:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /saas-boost/${Environment}/PRIVATE_API_TRUST_ROLE
      Type: String
      Value: !GetAtt SaaSBoostSystemRole.Arn
  SystemRestClientExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-private-api-client-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-private-api-client-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt SaaSBoostSystemRole.Arn
  SystemRestApiClientLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-private-api-client
      RetentionInDays: 30
  SystemRestApiClient:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sb-${Environment}-private-api-client
      Role: !GetAtt SystemRestClientExecRole.Arn
      Runtime: java11
      Timeout: 300
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.SystemRestApiClient
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/SystemRestApiClient-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref ApiGatewayHelperLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          API_TRUST_ROLE: !GetAtt SaaSBoostSystemRole.Arn
          API_GATEWAY_HOST: !Sub ${SaaSBoostPrivateApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
          API_GATEWAY_STAGE: !Ref PrivateApiStage
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "APIClient"
  SystemApiEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBus
      Name: !Sub sb-${Environment}-system-api-call
      State: ENABLED
      EventPattern:
        source: ['saas-boost']
        detail-type: ['System API Call']
      Targets:
        - Arn: !GetAtt SystemRestApiClient.Arn
          Id: !Sub sb-${Environment}-private-api-client
  SystemRestApiClientEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SystemRestApiClient
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt SystemApiEventRule.Arn
  EcsShutdownServicesExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-ecs-shutdown-services-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-ecs-shutdown-services-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-tenant*
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt SaaSBoostSystemRole.Arn
  EcsShutdownServicesLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-ecs-shutdown-services
      RetentionInDays: 30
  EcsShutdownServicesLambda:
    Type: AWS::Lambda::Function
    DependsOn: EcsShutdownServicesLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-ecs-shutdown-services
      Role: !GetAtt EcsShutdownServicesExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.EcsShutdownServices
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/EcsShutdownServices-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref ApiGatewayHelperLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          API_TRUST_ROLE: !GetAtt SaaSBoostSystemRole.Arn
          API_GATEWAY_HOST: !Sub ${SaaSBoostPrivateApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
          API_GATEWAY_STAGE: !Ref PrivateApiStage
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "EcsShutdownServices"
  EcsStartupServicesExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-ecs-startup-services-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-ecs-startup-services-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource:
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:service/*
                Condition:
                  StringLike:
                    ecs:cluster:
                      - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/sb-${Environment}-tenant*
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt SaaSBoostSystemRole.Arn
  EcsStartupServicesLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-ecs-startup-services
      RetentionInDays: 30
  EcsStartupServicesLambda:
    Type: AWS::Lambda::Function
    DependsOn: EcsStartupServicesLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-ecs-startup-services
      Role: !GetAtt EcsStartupServicesExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.EcsStartupServices
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/EcsStartupServices-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref ApiGatewayHelperLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          API_TRUST_ROLE: !GetAtt SaaSBoostSystemRole.Arn
          API_GATEWAY_HOST: !Sub ${SaaSBoostPrivateApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
          API_GATEWAY_STAGE: !Ref PrivateApiStage
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "EcsStartupServices"
  SetInstanceProtectionExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-set-instance-protection-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-set-instance-protection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - autoscaling:SetInstanceProtection
                Resource: !Sub arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/sb-${Environment}-tenant-*
  SetInstanceProtectionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-set-instance-protection
      RetentionInDays: 30
  SetInstanceProtectionFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - SetInstanceProtectionLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-set-instance-protection
      Role: !GetAtt SetInstanceProtectionExecRole.Arn
      Runtime: java11
      Timeout: 870
      MemorySize: 640
      Handler: com.amazon.aws.partners.saasfactory.saasboost.SetInstanceProtection
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/SetInstanceProtection-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "SetInstanceProtection"
  AttachCapacityProviderExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-attach-capacity-provider-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-attach-capacity-provider-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sb-${Environment}-onboarding
              - Effect: Allow
                Action:
                  - ecs:DescribeClusters
                  - ecs:PutClusterCapacityProviders
                Resource: !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/*
  AttachCapacityProviderLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-attach-capacity-provider
      RetentionInDays: 30
  AttachCapacityProviderFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - AttachCapacityProviderLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-attach-capacity-provider
      Role: !GetAtt AttachCapacityProviderExecRole.Arn
      Runtime: java11
      Timeout: 870
      MemorySize: 640
      Handler: com.amazon.aws.partners.saasfactory.saasboost.AttachEcsCapacityProvider
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/AttachEcsCapacityProvider-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BoostService"
          Value: "AttachEcsCapacityProvider"
  CodeBuildStartLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-start-build
      RetentionInDays: 30
  CodeBuildStartExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-start-build-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-start-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
  CodeBuildStartLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildStartLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-start-build
      Role: !GetAtt CodeBuildStartExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.StartCodeBuild
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/StartCodeBuild-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
  CodePipelineWaitHandlerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/sb-${Environment}-pipeline-waithandler
      RetentionInDays: 30
  CodePipelineWaitHandlerExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sb-${Environment}-pipeline-waithandler-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sb-${Environment}-pipeline-waithandler-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: '*'
  CodePipelineWaitHandlerLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodePipelineWaitHandlerLogs
    Properties:
      FunctionName: !Sub sb-${Environment}-pipeline-waithandler
      Role: !GetAtt CodePipelineWaitHandlerExecRole.Arn
      Runtime: java11
      Timeout: 600
      MemorySize: 1024
      Handler: com.amazon.aws.partners.saasfactory.saasboost.CodePipelineWaitHandler
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/CodePipelineWaitHandler-lambda.zip
      Layers:
        - !Ref SaaSBoostUtilsLayer
        - !Ref CloudFormationUtilsLayer
      Environment:
        Variables:
          SAAS_BOOST_ENV: !Ref Environment
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      Tags:
        - Key: "Application"
          Value: "SaaSBoost"
        - Key: "Environment"
          Value: !Ref Environment
  # Macro transform will add as many AWS::ECR::Repository resources as necessary
  # based on the length of the list of ApplicationServices passed as a parameter
Outputs:
  CodePipelineUpdateEcsService:
    Description: Lambda to update ECS desired count
    Value: !Ref CodePipelineUpdateEcsServiceLambda
  StartCodeBuildLambda:
    Description: Lambda ARN to trigger a CodeBuild project
    Value: !GetAtt CodeBuildStartLambda.Arn
  CodePipelineWaitHandler:
    Description: Lambda to process CloudFormation wait condition as part of a CodePipeline
    Value: !Ref CodePipelineWaitHandlerLambda
  SaaSBoostPublicApi:
    Description: SaaS Boost Public API
    Value: !Ref SaaSBoostPublicApi
  SaaSBoostPublicApiRootResourceId:
    Description: SaaS Boost public API root resource id
    Value: !GetAtt SaaSBoostPublicApi.RootResourceId
  SaaSBoostPrivateApi:
    Description: SaaS Boost Private API
    Value: !Ref SaaSBoostPrivateApi
  SaaSBoostPrivateApiRootResourceId:
    Description: SaaS Boost private API root resource id
    Value: !GetAtt SaaSBoostPrivateApi.RootResourceId
...