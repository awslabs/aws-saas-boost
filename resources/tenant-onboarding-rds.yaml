---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: SaaS Boost Tenant Onboarding RDS Extension
Parameters:
  Environment:
    Description: Environment (test, uat, prod, etc.)
    Type: String
  SaaSBoostBucket:
    Description: SaaS Boost assets S3 bucket
    Type: String
  LambdaSourceFolder:
    Description: Folder for lambda source code to change on each deployment
    Type: String
    Default: lambdas
  TenantId:
    Description: The GUID for the tenant
    Type: String
  VPC:
    Description: VPC id for this tenant
    Type: AWS::EC2::VPC::Id
  PrivateSubnetA:
    Description: Private subnet for EFS mount target
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetB:
    Description: Private subnet for EFS mount target
    Type: AWS::EC2::Subnet::Id
  ECSSecurityGroup:
    Description: Source security group for ECS to access EFS
    Type: AWS::EC2::SecurityGroup::Id
  RDSInstanceClass:
    Description: The compute and memory capacity of the DB instance
    Type: String
  RDSEngine:
    Description: The database engine
    Type: String
  RDSEngineVersion:
    Description: The version number of the database engine to use
    Type: String
  RDSParameterGroupFamily:
    Description: The database parameter group family supporting the engine and engine version. Only used for Aurora clusters.
    Type: String
  RDSMasterUsername:
    Description: The master username for the database
    Type: String
  RDSMasterPasswordParam:
    Description: The Parameter Store secure string parameter and version containing the master database password
    Type: String
  RDSPort:
    Description: The TCP port to connect to the database on
    Type: String
  RDSDatabase:
    Description: Optional. The name of the database to create.
    Type: String
  RDSBootstrap:
    Description: Optional. The filename of the SQL bootstrap file.
    Type: String
Conditions:
  Aurora:
    Fn::Or:
      - !Equals [!Ref RDSEngine, 'aurora-mysql']
      - !Equals [!Ref RDSEngine, 'aurora-postgresql']
  NotAurora: !Not [Condition: Aurora]
  SqlServer:
    Fn::Or:
      - !Equals [!Ref RDSEngine, 'sqlserver-ex']
      - !Equals [!Ref RDSEngine, 'sqlserver-web']
      - !Equals [!Ref RDSEngine, 'sqlserver-se']
      - !Equals [!Ref RDSEngine, 'sqlserver-ee']
  DatabaseName: !Not [!Equals [!Ref RDSDatabase, '']]
  CreateDatabase:
    Fn::And:
      - Condition: SqlServer
      - Condition: DatabaseName
  BootstrapFile: !Not [!Equals [!Ref RDSBootstrap, '']]
  BootstrapDatabase:
    Fn::Or:
      - Condition: CreateDatabase
      - Condition: BootstrapFile
  SupportsEncryption: !Not [!Equals [!Ref RDSEngine, 'sqlserver-ex']]
Resources:
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-subnets']]
      DBSubnetGroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-subnets']]
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-sg']]
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
  RDSSecurityGroupIngressECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref RDSPort
      ToPort: !Ref RDSPort
      SourceSecurityGroupId: !Ref ECSSecurityGroup
  RDSBootstrapSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BootstrapDatabase
    Properties:
      GroupName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-bstrp-sg']]
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
  EncryptionKey:
    Condition: SupportsEncryption
    DeletionPolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub sb-${Environment}-key-${TenantId}
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
          # - Sid: Allow access for Key Administrators
          #   Effect: Allow
          #   Principal:
          #     AWS:
          #       - !Join
          #         - ''
          #         - - 'arn:aws:iam::'
          #           - !Ref 'AWS::AccountId'
          #           - :root
          #   Action:
          #     - kms:Create*
          #     - kms:Describe*
          #     - kms:Enable*
          #     - kms:List*
          #     - kms:Put*
          #     - kms:Update*
          #     - kms:Revoke*
          #     - kms:Disable*
          #     - kms:Get*
          #     - kms:Delete*
          #     - kms:ScheduleKeyDeletion
          #     - kms:CancelKeyDeletion
          #   Resource: '*'
          # - Sid: Allow use of the key
          #   Effect: Allow
          #   Principal:
          #     AWS:
          #       - !Join
          #         - ''
          #         - - 'arn:aws:iam::'
          #           - !Ref 'AWS::AccountId'
          #           - :root
          #   Action:
          #     - kms:Encrypt
          #     - kms:Decrypt
          #     - kms:ReEncrypt*
          #     - kms:GenerateDataKey*
          #     - kms:DescribeKey
          #   Resource: '*'
          # - Sid: Allow attachment of persistent resources
          #   Effect: Allow
          #   Principal:
          #     AWS:
          #       - !Join
          #         - ''
          #         - - 'arn:aws:iam::'
          #           - !Ref 'AWS::AccountId'
          #           - :root
          #   Action:
          #     - kms:CreateGrant
          #     - kms:ListGrants
          #     - kms:RevokeGrant
          #   Resource: '*'
          #   Condition:
          #     Bool:
          #       kms:GrantIsForAWSResource: true
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  EncryptionKeyAlias:
    Condition: SupportsEncryption
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/sb-${Environment}-${TenantId}
      TargetKeyId: !Ref EncryptionKey
  RDSSecurityGroupIngressBootstrap:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: BootstrapDatabase
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref RDSPort
      ToPort: !Ref RDSPort
      SourceSecurityGroupId: !Ref RDSBootstrapSecurityGroup
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Condition: Aurora
    DependsOn: RDSSecurityGroup
    Properties:
      DBClusterIdentifier:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBClusterParameterGroupName: !Sub 'default.${RDSParameterGroupFamily}'
      Engine: !Ref RDSEngine
      EngineVersion: !Ref RDSEngineVersion
      DatabaseName: !If [DatabaseName, !Ref RDSDatabase, !Ref 'AWS::NoValue']
      # TODO: Parameterize these
      BackupRetentionPeriod: 14
      # PreferredMaintenanceWindow: sat:22:30-sun:02:00
      # PreferredBackupWindow: sat:22:30-sun:02:00
      ##
      KmsKeyId: !If [SupportsEncryption, !GetAtt EncryptionKey.Arn, !Ref 'AWS::NoValue']
      StorageEncrypted: !If [SupportsEncryption, True, False]
      Port: !Ref RDSPort
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword:
        Fn::Join:
          - ''
          - - '{{resolve:ssm-secure:'
            - !Ref RDSMasterPasswordParam
            - '}}'
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  RDSAuroraInstance:
    Type: AWS::RDS::DBInstance
    Condition: Aurora
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: false
      DBInstanceClass: !Ref RDSInstanceClass
      Engine: !Ref RDSEngine
      DeleteAutomatedBackups: False
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Condition: NotAurora
    DependsOn: RDSSecurityGroup
    Properties:
      DBInstanceIdentifier:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      DBInstanceClass: !Ref RDSInstanceClass
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      # TODO: Parameterize these
      BackupRetentionPeriod: 14
      # PreferredMaintenanceWindow: sat:22:30-sun:02:00
      # PreferredBackupWindow: sat:22:30-sun:02:00
      DeleteAutomatedBackups: False
      MultiAZ: false
      Engine: !Ref RDSEngine
      EngineVersion: !Ref RDSEngineVersion
      KmsKeyId: !If [SupportsEncryption, !GetAtt EncryptionKey.Arn, !Ref 'AWS::NoValue']
      StorageEncrypted: !If [SupportsEncryption, True, False]
      LicenseModel:
        Fn::If:
          - SqlServer
          - license-included
          - !Ref 'AWS::NoValue'
      DBName:
        Fn::If:
          - SqlServer
          - !Ref 'AWS::NoValue'
          - !If [DatabaseName, !Ref RDSDatabase, !Ref 'AWS::NoValue']
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword:
        Fn::Join:
          - ''
          - - '{{resolve:ssm-secure:'
            - !Ref RDSMasterPasswordParam
            - '}}'
      AllocatedStorage: '100'
      StorageType: gp2
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  RDSBootstrapDatabaseRole:
    Type: AWS::IAM::Role
    Condition: BootstrapDatabase
    Properties:
      RoleName:
        Fn::Join:
          - ''
          - - 'sb-'
            - !Ref Environment
            - '-rds-bstrp-role-tenant-'
            - !Select [0, !Split ['-', !Ref TenantId]]
            - '-'
            - !Ref AWS::Region
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Join:
              - ''
              - - 'sb-'
                - !Ref Environment
                - '-rds-bstrp-policy-tenant-'
                - !Select [0, !Split ['-', !Ref TenantId]]
                - '-'
                - !Ref AWS::Region
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${SaaSBoostBucket}/bootstrap.sql
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/saas-boost/${Environment}/DB_MASTER_PASSWORD
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Condition:
                  StringEquals:
                    kms:ViaService:
                      - !Sub ssm.${AWS::Region}.amazonaws.com
  RDSBootstrapDatabaseLogs:
    Type: AWS::Logs::LogGroup
    Condition: BootstrapDatabase
    Properties:
      LogGroupName:
        Fn::Join: ['', ['/aws/lambda/tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-bootstrap']]
      RetentionInDays: 30
  RDSBootstrapDatabase:
    Type: AWS::Lambda::Function
    Condition: BootstrapDatabase
    DependsOn:
      - RDSBootstrapDatabaseLogs
    Properties:
      FunctionName:
        Fn::Join: ['', ['tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-rds-bootstrap']]
      Role: !GetAtt RDSBootstrapDatabaseRole.Arn
      Runtime: java11
      Timeout: 870
      MemorySize: 640
      # Has to be a VPC Lambda because we're talking to RDS
      VpcConfig:
        SecurityGroupIds:
          - !Ref RDSBootstrapSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Handler: com.amazon.aws.partners.saasfactory.saasboost.RdsBootstrap
      Code:
        S3Bucket: !Ref SaaSBoostBucket
        S3Key: !Sub ${LambdaSourceFolder}/RdsBootstrap-lambda.zip
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  AuroraWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: Aurora
    DependsOn: RDSAuroraInstance
  NotAuroraWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: NotAurora
    DependsOn: RDSInstance
  BootstrapWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !If [Aurora, !Ref AuroraWaitHandle, !Ref NotAuroraWaitHandle]
      Timeout: '1'
      Count: 0
  InvokeRDSBootstrapDatabase:
    Type: Custom::CustomResource
    Condition: BootstrapDatabase
    # Have to make sure the entire network is still up when you delete
    # or we won't be able to call back to the CFN response URL
    DependsOn:
      - RDSBootstrapDatabase
      - BootstrapWaitCondition
    Properties:
      ServiceToken: !GetAtt RDSBootstrapDatabase.Arn
      Host: !If [Aurora, !GetAtt RDSCluster.Endpoint.Address, !GetAtt RDSInstance.Endpoint.Address]
      Port: !Ref RDSPort
      Database: !Ref RDSDatabase
      User: !Ref RDSMasterUsername
      Password: !Ref RDSMasterPasswordParam # CloudFormation doesn't allow auto decrypting of secure params here...
      BootstrapFileBucket: !Ref SaaSBoostBucket
      BootstrapFileKey: !If [BootstrapFile, 'bootstrap.sql', '']
Outputs:
  RdsEndpoint:
    Description: RDS endpoint
    Value:
      !If [Aurora, !GetAtt RDSCluster.Endpoint.Address, !GetAtt RDSInstance.Endpoint.Address]